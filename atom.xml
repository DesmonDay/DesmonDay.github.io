<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DesmonDay&#39;s Blog</title>
  
  <subtitle>一只小辣鸡的自我拯救之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/DesmonDay/"/>
  <updated>2019-01-23T13:35:22.161Z</updated>
  <id>https://github.com/DesmonDay/</id>
  
  <author>
    <name>Desmon Day</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVTE电话面试</title>
    <link href="https://github.com/DesmonDay/2019/01/23/CVTE%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95/"/>
    <id>https://github.com/DesmonDay/2019/01/23/CVTE电话面试/</id>
    <published>2019-01-23T13:33:12.000Z</published>
    <updated>2019-01-23T13:35:22.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVTE"><a href="#CVTE" class="headerlink" title="CVTE"></a>CVTE</h1><h2 id="计网"><a href="#计网" class="headerlink" title="计网"></a>计网</h2><p>一个客户端和服务端通信，如果客户端突然关机，服务端能检测到吗？</p><p>在浏览器上方输入一个域名，之后会产生什么请求？(HTTP协议)</p><p>TCP和UDP的区别</p><p>TCP的滑动窗口协议</p><p>有尝试过网络编程吗？</p><h2 id="操作系统："><a href="#操作系统：" class="headerlink" title="操作系统："></a>操作系统：</h2><p>多线程和多进程的区别</p><p>线程进程哪个切换花销大，为什么</p><p>死锁的概念，如何避免死锁，在编程中如何设置一个死锁的例子</p><p>举一点同步的例子</p><p>有在编程中用过进程同步之类的吗？（我回答，C++11有，但是我不太记得了）</p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>用过共享指针吗？它的作用是什么？</p><p>多态了解吗？</p><p>假设一个基类有虚函数，派生类对其进行重写，是怎么调用到自己实现的函数的？（虚函数表）</p><p>一个类A，一个类B，类C继承A、B，那么类C有多少个虚函数表，表里的内容有什么？</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>哪个最满意，遇到了什么困难？</p><p>还有吗？我讲了安卓项目，然后他帮我总结，噢~你就是参考别人的代码进行修改，实现对应的功能</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CVTE&quot;&gt;&lt;a href=&quot;#CVTE&quot; class=&quot;headerlink&quot; title=&quot;CVTE&quot;&gt;&lt;/a&gt;CVTE&lt;/h1&gt;&lt;h2 id=&quot;计网&quot;&gt;&lt;a href=&quot;#计网&quot; class=&quot;headerlink&quot; title=&quot;计网&quot;&gt;&lt;/a&gt;计网&lt;/h
      
    
    </summary>
    
      <category term="找工作" scheme="https://github.com/DesmonDay/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指Offer-二叉搜索树的后序遍历序列</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-二叉搜索树的后序遍历序列/</id>
    <published>2019-01-20T13:52:48.000Z</published>
    <updated>2019-01-20T13:57:46.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这道题又是没有思路，只能看看提示。自己也是够蠢，居然忘记了后序遍历根的特性！！！BST(Binary-Search-Tree)的后序序列的合法序列是，对于一个序列S，最后一个元素是x(也就是根)，如果去掉最后一个元素的序列为T，那么T满足：T可以分成两段，前一段（左子树）小于x，后一段（右子树）大于x，且这两段（子树）都是合法的后序序列。使用递归即可解决。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">VerifySquenceOfBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sequence.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(sequence.size()==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">        <span class="keyword">return</span> verifybst(sequence, <span class="number">0</span>, sequence.size()<span class="number">-1</span>);<span class="comment">//相信自己的第一直觉</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">verifybst</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bst, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = begin;</span><br><span class="line">        <span class="keyword">while</span>(bst[i] &lt; bst[end]) <span class="comment">// 左半部分</span></span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">for</span>(; j&lt;end; j++) <span class="comment">// 右半部分</span></span><br><span class="line">            <span class="keyword">if</span>(bst[j] &lt; bst[end]) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(j == end) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//！这里是教训</span></span><br><span class="line">        <span class="keyword">return</span> verifybst(bst, begin, i<span class="number">-1</span>) &amp; verifybst(bst, i, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>记住，不一定只能使用一个函数，在必要的时候可能定义其他函数。另外，必须要有结束的条件，因此必定有return false和return true两种情况，吸取教训！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-边界条件的判断</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-从上往下打印二叉树/</id>
    <published>2019-01-20T09:34:29.000Z</published>
    <updated>2019-01-20T09:35:56.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这道题其实就是简单的层次遍历。但是我总是会忽略一点，首先要进行边界条件的判断！！！</p><pre><code class="cpp"><span class="comment">/*</span><span class="comment">struct TreeNode {</span><span class="comment">    int val;</span><span class="comment">    struct TreeNode *left;</span><span class="comment">    struct TreeNode *right;</span><span class="comment">    TreeNode(int x) :</span><span class="comment">            val(x), left(NULL), right(NULL) {</span><span class="comment">    }</span><span class="comment">};*/</span><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span><span class="keyword">public</span>:    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; PrintFromTopToBottom(TreeNode* root) {        <span class="comment">// 层次遍历</span>        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;        TreeNode* temp = <span class="literal">NULL</span>;        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;        <span class="keyword">if</span>(!root) <span class="keyword">return</span> num; <span class="comment">//这一步很重要！！！边界条件的判断</span>        q.push(root);        <span class="keyword">while</span>(!q.empty()){            temp = q.front();            num.push_back(temp-&gt;val);            q.pop();            <span class="keyword">if</span>(temp-&gt;left)                 q.push(temp-&gt;left);            <span class="keyword">if</span>(temp-&gt;right)                q.push(temp-&gt;right);        }        <span class="keyword">return</span> num;    }};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;从上往下打印出二叉树的每个节点，同层节点从左至右打印。&lt;/p&gt;
&lt;h1 id=&quot;思路分析&quot;&gt;&lt;a href=&quot;#思路分析&quot; 
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-栈的压入、弹出序列</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-栈的压入、弹出序列/</id>
    <published>2019-01-20T09:02:55.000Z</published>
    <updated>2019-01-20T09:13:43.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这种题目，最直观的思路就是模拟给定的入栈出栈的过程。首先，必须要判断<strong>边界条件</strong>！！接着，模拟整个过程，设置一个辅助栈，根据给定的入栈顺序依次压入数字，若其间有出现栈顶数据与出栈序列的首个数据相同的情况，则弹出栈元素，同时相当于遍历了一个出栈元素(此部分要用while循环来控制，若出现多次连续的符合要求的情况，则可方便的处理)；若不同，则继续入栈。</p><p>若出栈序列合法，则很明显最终栈空，若栈不为空，说明不合法。<br>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsPopOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pushV,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; popV)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查看了一个博客的小提示，直观的思路就是根据已知的入栈和出栈序列来进行模拟。</span></span><br><span class="line">        <span class="keyword">if</span>(pushV.size()!=popV.size() || !pushV.size() || !popV.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;pushV.size(); i++)&#123;</span><br><span class="line">            temp.push(pushV[i]);</span><br><span class="line">            <span class="keyword">while</span>(!temp.empty())&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp.top() == popV[j])&#123;</span><br><span class="line">                    temp.pop();</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-包含min函数的栈</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-包含min函数的栈/</id>
    <published>2019-01-20T08:02:53.000Z</published>
    <updated>2019-01-20T08:21:19.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>定义栈的数据结构，使用类便可以建立。需要实现push,pop,top和min函数。这道题我在复习数据结构的时候看过，当时觉得挺巧妙，但是一转眼就忘了。随意查了一下博客，很快便想起来是怎么做的。</p><p>最基本的方法如下，即采用一个辅助栈来实现：辅助栈专门用来存储当前数据栈中的元素的最小值。当数据栈中push进第一个元素，该元素也得进辅助栈；当数据栈中再次push进元素，该元素如果小于辅助栈中的最上边的元素，将该元素push进辅助栈；否则，新push进的元素大于辅助栈的最上边的元素，此时，辅助栈的最上边的元素再次入栈。</p><p>实现如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        origin.push(value);</span><br><span class="line">        <span class="keyword">if</span>(min_.empty())       </span><br><span class="line">            min_.push(value);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(value &lt; min_.top()) <span class="comment">//若入栈元素小于最小值栈的顶元素</span></span><br><span class="line">                min_.push(value);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                min_.push(min_.top());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!origin.empty())&#123;</span><br><span class="line">            origin.pop();</span><br><span class="line">            min_.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> origin.top();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min_.top();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; origin;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; min_; <span class="comment">// 辅助栈</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>当然，我们也可以不需要每次用新的元素时都要往辅助栈内入栈，而可以通过判断大小来入栈。与上一种方法不同的是，这里不需要每次来新的元素都要往min_栈内添加元素，而可以只添加小于或等于当前栈顶部的元素。<br>如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        origin.push(value);</span><br><span class="line">        <span class="keyword">if</span>(min_.empty()) <span class="comment">//这里要注意！不可以用origin.empty()来判断了</span></span><br><span class="line">            min_.push(value);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(value &lt;= min_.top()) <span class="comment">//相等的也入栈</span></span><br><span class="line">                min_.push(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(origin.top()==min_.top())</span><br><span class="line">            min_.pop();</span><br><span class="line">        origin.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> origin.top();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min_.top();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; origin;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; min_; <span class="comment">// 辅助栈</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-顺时针打印矩阵(难)</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-顺时针打印矩阵/</id>
    <published>2019-01-20T04:57:09.000Z</published>
    <updated>2019-01-20T07:44:03.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这道题我没有一个正确的思路，因此想不出如何做。直接参考了《剑指Offer》一书。</p><p>当我们遇到一个复杂问题的时候，可以用图形来帮助思考。由于是以从外圈到内圈的顺序依次打印的，所以我们可以把矩阵想象成若干个圈。我们可以用一个循环来打印矩阵，每次打印矩阵的一个圈。接着，我参考了 <a href="https://www.nowcoder.com/profile/6606749/codeBookDetail?submissionId=15814779" target="_blank" rel="noopener">https://www.nowcoder.com/profile/6606749/codeBookDetail?submissionId=15814779</a> 的写法。下面是对这道题解法的详细说明。感觉有点混乱啊！！！</p><pre><code class="cpp"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>{</span><span class="keyword">public</span>:    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printMatrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; matrix) {        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;        <span class="keyword">int</span> rows = matrix.size();        <span class="keyword">int</span> cols = matrix[<span class="number">0</span>].size();        <span class="keyword">int</span> circles = ((rows&lt;cols ?: rows:cols)<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>; <span class="comment">//求打印圈数</span>        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;circles; i++){            <span class="comment">// 从左往右打印</span>            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;cols-i; j++){                num.push_back(matrix[i][j]);            }            <span class="comment">// 从上往下打印</span>            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;rows-i; j++){ <span class="comment">//最后一行为rows-i-1</span>                num.push_back(matrix[j][cols-i<span class="number">-1</span>]);            }            <span class="comment">// 从右往左打印，其中(rows-i-1!=i)避免重复打印</span>            <span class="keyword">for</span>(<span class="keyword">int</span> j=cols-i<span class="number">-2</span>; (j&gt;=i)&amp;&amp;(rows-i<span class="number">-1</span>!=i); j--){                num.push_back(matrix[rows-i<span class="number">-1</span>][j]);            }            <span class="comment">// 从下往上打印</span>            <span class="keyword">for</span>(<span class="keyword">int</span> j=rows-i<span class="number">-2</span>; (j&gt;=i+<span class="number">1</span>)&amp;&amp;(i!=cols-i<span class="number">-1</span>); j--){                num.push_back(matrix[j][i]);            }        }        <span class="keyword">return</span> num;    }}</code></pre><p>其中rows-i-1!=i与cols-i-1!=i的限制就是单行或单列只打印一次，这个判断条件要特别注意。这道题没有什么特别的技巧，要注意的点就是确定for循环的条件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-二叉树的镜像</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-二叉树的镜像/</id>
    <published>2019-01-20T04:51:50.000Z</published>
    <updated>2019-01-20T04:53:29.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>就按照自己的思路来写，不要怀疑自己。其实题目挺简单的，使用递归方法即可完成。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode *pRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pRoot == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        TreeNode* tmp = pRoot-&gt;left;</span><br><span class="line">        pRoot-&gt;left = pRoot-&gt;right;</span><br><span class="line">        pRoot-&gt;right = tmp;</span><br><span class="line">        </span><br><span class="line">        Mirror(pRoot-&gt;left);</span><br><span class="line">        Mirror(pRoot-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;操作给定的二叉树，将其变换为源二叉树的镜像。&lt;/p&gt;
&lt;h1 id=&quot;思路分析&quot;&gt;&lt;a href=&quot;#思路分析&quot; class
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-树的子结构(难)</title>
    <link href="https://github.com/DesmonDay/2019/01/18/%E5%89%91%E6%8C%87Offer-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/"/>
    <id>https://github.com/DesmonDay/2019/01/18/剑指Offer-树的子结构/</id>
    <published>2019-01-18T09:16:23.000Z</published>
    <updated>2019-01-18T14:54:52.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>思路参考《剑指Offer》一书。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) :</span><br><span class="line">            val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这道题，我不会，一点思路都没有，只能直接看答案了。。。 哎，还是要多多练练。要在树A中找到和树B的根节点的值一样的节点R；第二步，判断树A中以R为根节点的子树是不是包含和树B一样的结构。</p><p>第一步在树A中查找与根节点的值一样的节点，实际上就是树的遍历，采用递归的方式，对应代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">HasSubtree</span><span class="params">(TreeNode* pRoot1, TreeNode* pRoot2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> result = <span class="literal">false</span>; <span class="comment">//检查空指针</span></span><br><span class="line">        <span class="comment">// 第一步在在树A中查找与根节点的值一样的节点</span></span><br><span class="line">        <span class="keyword">if</span>(pRoot1 &amp;&amp; pRoot2)&#123; <span class="comment">//类似前序遍历</span></span><br><span class="line">            <span class="keyword">if</span>(pRoot1-&gt;val == pRoot2-&gt;val)&#123;</span><br><span class="line">                result = IsSubtree(pRoot1, pRoot2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">                result = HasSubtree(pRoot1-&gt;left, pRoot2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">                result = HasSubtree(pRoot1-&gt;right, pRoot2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在面试的时候，一定要注意边界条件的检查，即检查空指针。当树A或树B为空的时候，定义相应的输出。如果没有检查并进行相应的处理，则程序非常容易崩溃，这是面试的大忌。</p><p>在上述代码中，我们调用HasSubtree遍历二叉树A。如果发现某一节点的值和树B的头节点的值相同，则调用IsSubtree，进行第二步判断。</p><p>第二步是判断树A中以R为根节点的子树是不是和树B具有相同的结构。同样，也可以用递归的思路考虑：如果节点R的值和树B的根节点不相同，则以R为根节点的子树和树B肯定不同；如果值相同，则递归地判断他们各自的左右节点的值是不是相同。递归的终止条件是我们到达了树A或者树B的节点。对应代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsSubtree</span><span class="params">(TreeNode* p1, TreeNode* p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p2 == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(p1 == <span class="literal">NULL</span> &amp;&amp; p2) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(p1-&gt;val != p2-&gt;val) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> IsSubtree(p1-&gt;left, p2-&gt;left) &amp; IsSubtree(p1-&gt;right, p2-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码有多处判断一个指针是不是空，这样做是为了避免试图访问空指针而造成陈旭崩溃，同时也设置了递归调用的退出条件。在写遍历树的代码时要高度警惕，在每一处需要访问地址的时候询问自己这个地址有没有可能是NULL，如果是该如何。</p><p>若树的结构中val的类型是double，则不能用==直接判断相等，而要设置如下判断函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Equal</span><span class="params">(<span class="keyword">double</span> num1, <span class="keyword">double</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((num1-num2 &gt; <span class="number">-0.0000001</span>) &amp;&amp; (num1-num2 &lt; <span class="number">0.0000001</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）&lt;/p&gt;
&lt;h1 id=&quot;思路分析
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-合并两个排序的链表</title>
    <link href="https://github.com/DesmonDay/2019/01/18/%E5%89%91%E6%8C%87Offer-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
    <id>https://github.com/DesmonDay/2019/01/18/剑指Offer-合并两个排序的链表/</id>
    <published>2019-01-18T09:04:28.000Z</published>
    <updated>2019-01-18T09:15:27.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>想不到自己做对了，没遇到什么因为指针而错误的坑！算是一个小小的进步吧。虽然有个地方，因为我不知道动态内存怎么申请的，所以一开始有点卡，struct申请：ListNode* head = new ListNode(0); 这是在有构造函数的情况下，若没有，则直接new再加上结构体的名称。</p><p>至于算法本身，直接根据大小进行合并即可，下面这个是非递归的版本。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 单调递增</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">Merge</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span></span>&#123;</span><br><span class="line">        ListNode* head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">//记住！</span></span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span>(pHead1 &amp;&amp; pHead2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pHead1-&gt;val &lt;= pHead2-&gt;val)&#123;</span><br><span class="line">                p-&gt;next = pHead1;</span><br><span class="line">                pHead1 = pHead1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                p-&gt;next = pHead2;</span><br><span class="line">                pHead2 = pHead2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pHead1) p-&gt;next = pHead1;</span><br><span class="line">        <span class="keyword">if</span>(pHead2) p-&gt;next = pHead2;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>下面这个是学习别人的递归版本。其实，递归写起来是比较短小精悍的，但关键就是要明白，结束条件是什么，怎么写递归，这也始终是我的一个短板。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 单调递增</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">Merge</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">NULL</span>) <span class="keyword">return</span> pHead2;</span><br><span class="line">        <span class="keyword">if</span>(pHead2 == <span class="literal">NULL</span>) <span class="keyword">return</span> pHead1;</span><br><span class="line">        ListNode* head = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(pHead1-&gt;val &lt; pHead2-&gt;val)&#123;</span><br><span class="line">            head = pHead1;</span><br><span class="line">            head-&gt;next = Merge(pHead1-&gt;next, pHead2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            head = pHead2;</span><br><span class="line">            head-&gt;next = Merge(pHead1, pHead2-&gt;next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。&lt;/p&gt;
&lt;h1 id=&quot;解题思
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-反转链表</title>
    <link href="https://github.com/DesmonDay/2019/01/18/%E5%89%91%E6%8C%87Offer-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://github.com/DesmonDay/2019/01/18/剑指Offer-反转链表/</id>
    <published>2019-01-18T07:44:27.000Z</published>
    <updated>2019-01-18T08:47:32.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个链表，反转链表后，输出新链表的表头。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>哎，惭愧，这题我没有做出来。然而，本应该是一道很基础的题目。我现在会两种写法，一是利用栈，二是利用头插法。这里就各自重写一次。另外，链表题要特别注意为空的情况。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList1</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead==<span class="literal">NULL</span> || pHead-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> pHead;</span><br><span class="line">        ListNode* p = pHead;</span><br><span class="line">        <span class="built_in">stack</span>&lt;ListNode*&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next)&#123;</span><br><span class="line">            s.push(p);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* NewHead = p;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            p-&gt;next = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> NewHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList2</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead==<span class="literal">NULL</span> || pHead-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> pHead;</span><br><span class="line">        ListNode* p = pHead;</span><br><span class="line">        ListNode* q = pHead-&gt;next;</span><br><span class="line">        pHead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* r = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(q)&#123;</span><br><span class="line">            r = q-&gt;next;</span><br><span class="line">            q-&gt;next = p;</span><br><span class="line">            p = q;</span><br><span class="line">            q = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后还看到一种递归的写法，但是不太懂，就不写了。链表题通常要注意以下两点：</p><ol><li>如果输入的头结点是 NULL，或者整个链表只有一个结点的时候</li><li>链表断裂的考虑</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个链表，反转链表后，输出新链表的表头。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-调整数组顺序使奇数位于偶数前面</title>
    <link href="https://github.com/DesmonDay/2019/01/16/%E5%89%91%E6%8C%87Offer-%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/"/>
    <id>https://github.com/DesmonDay/2019/01/16/剑指Offer-调整数组顺序使奇数位于偶数前面/</id>
    <published>2019-01-16T14:01:16.000Z</published>
    <updated>2019-01-16T14:05:23.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>一开始把题目看错了，没有看到要求相对位置不变，因此使用了类似于快排的方法来做（这个也应该是一个可能的考点）。由于要求相对位置不变，我的想法很简单，将奇数和偶数分别按顺序存储在两个vector中，再修改原始vector数组中的数字，但这样就占用了存储空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">array</span>[i] % <span class="number">2</span> != <span class="number">0</span>)&#123; <span class="comment">//奇数</span></span><br><span class="line">                a1.push_back(<span class="built_in">array</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> a2.push_back(<span class="built_in">array</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a1.size(); i++)&#123;</span><br><span class="line">            <span class="built_in">array</span>[i] = a1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=a1.size(); i&lt;<span class="built_in">array</span>.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = i-a1.size();</span><br><span class="line">            <span class="built_in">array</span>[i] = a2[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在牛客网上看到一个短小精悍的代码，有点类似冒泡排序。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="built_in">array</span>.size()<span class="number">-1</span>; j&gt;i; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">array</span>[j]%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; <span class="built_in">array</span>[j<span class="number">-1</span>]%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                    swap(<span class="built_in">array</span>[j], <span class="built_in">array</span>[j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>多学学！！同时，尽量熟悉使用vector来答题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-数值的整数次方(快速幂)</title>
    <link href="https://github.com/DesmonDay/2019/01/16/%E5%89%91%E6%8C%87Offer-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9-%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://github.com/DesmonDay/2019/01/16/剑指Offer-数值的整数次方-快速幂/</id>
    <published>2019-01-16T09:15:57.000Z</published>
    <updated>2019-01-16T12:14:57.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>参考博客：<a href="https://www.cnblogs.com/lca1826/p/6748372.html" target="_blank" rel="noopener">https://www.cnblogs.com/lca1826/p/6748372.html</a></p><p>惭愧，第一个想到的方法居然是调用pow()函数，而且也过了。实际上这道题目是要考察快速幂的知识。快速幂的目的就是做到快速求幂，假设我们要求a^b,按照朴素算法就是把a连乘b次，这样一来时间复杂度是O(b)也即是O(n)级别，快速幂能做到O(logn)，快了很多。</p><p>其原理如下： 假设我们要求a^b，那么其实b是可以拆成二进制的，该二进制数第i位的权为2^(i-1)，例如当b==11时，a^11=a^(2^0+2^1+2^3)，11的二进制是1011，11 = 2³×1 + 2²×0 + 2¹×1 + 2º×1，因此，我们将a¹¹转化为算 a^(2^0)*a^(2^1)*a^(2^3) ，看出来快的多了吧原来算11次，现在算三次。</p><p>由于是二进制，很自然想到使用位运算：&amp;和&gt;&gt;。&amp;运算通常用于二进制取位操作，例如一个数&amp;1的结果就是取二进制的最末位。还可以判断奇偶x&amp;1==0为偶，x&amp;1==1为奇。&gt;&gt;运算比较单纯,二进制去掉最后一位。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poww</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>,base=a;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>!=<span class="number">0</span>)</span><br><span class="line">        　　ans*=base;</span><br><span class="line">        base*=base;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">　 &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而需要注意的是，上面的b仅仅针对正数而言，因此在做题时需要考虑负数的情况，最终算法的书写结果如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> p = <span class="built_in">abs</span>((<span class="keyword">long</span> <span class="keyword">long</span>) exponent);</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p &amp; <span class="number">1</span>) </span><br><span class="line">                res *= base;</span><br><span class="line">            base *= base;</span><br><span class="line">            p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exponent&gt;<span class="number">0</span> ? res : <span class="number">1</span>/res; <span class="comment">// 判断正负</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-二进制中1的个数</title>
    <link href="https://github.com/DesmonDay/2019/01/16/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://github.com/DesmonDay/2019/01/16/剑指Offer-二进制中1的个数/</id>
    <published>2019-01-16T08:52:22.000Z</published>
    <updated>2019-01-16T09:00:05.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>我一开始的方法是最蠢笨的，即将整数表示为二进制位数，再依次数其中1的个数。由于负数是用补码表示的，因此负数这个情况花了不少时间。特别是最后有个特例始终过不了，只能添加了一个if判断语句，这才通过。蠢笨代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123; <span class="comment">// 正数</span></span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>, temp1 = n, temp2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(temp1 != <span class="number">0</span>)&#123;</span><br><span class="line">                temp2 = temp1 % <span class="number">2</span>;</span><br><span class="line">                temp1 = temp1 / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(temp2 == <span class="number">1</span>) cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">// 负数</span></span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">-2147483648</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>, temp1 = <span class="built_in">abs</span>(n), temp2 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> num[<span class="number">32</span>]; <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(temp1 != <span class="number">0</span>)&#123;</span><br><span class="line">                    temp2 = temp1 % <span class="number">2</span>;</span><br><span class="line">                    temp1 = temp1 / <span class="number">2</span>;</span><br><span class="line">                    <span class="comment">// 取反</span></span><br><span class="line">                    <span class="keyword">if</span>(temp2 == <span class="number">1</span>) num[i] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> num[i] = <span class="number">1</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 加1</span></span><br><span class="line">                <span class="keyword">int</span> n = i;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=n; j&lt;<span class="number">32</span>; j++) num[j] = <span class="number">1</span>;</span><br><span class="line">                i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(num[<span class="number">0</span>] == <span class="number">0</span>) num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    num[<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">                    <span class="keyword">while</span>(num[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                        num[i] = <span class="number">0</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt;= n<span class="number">-1</span>) num[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(num[i] == <span class="number">1</span>) cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外，其实还有一个问题是，整数为int型，这种做法还得考虑int是32位的。很复杂！！</p><h1 id="更简便方法"><a href="#更简便方法" class="headerlink" title="更简便方法"></a>更简便方法</h1><p>下面是从牛客看到的一个简单的方法。参考：<a href="https://www.nowcoder.com/profile/9536154/codeBookDetail?submissionId=17465787" target="_blank" rel="noopener">https://www.nowcoder.com/profile/9536154/codeBookDetail?submissionId=17465787</a>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n!= <span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下代码： 这段小小的代码，很是巧妙。</p><p>如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。</p><p>举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么<strong>一个整数的二进制有多少个1，就可以进行多少次这样的操作</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-矩阵覆盖</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E7%9F%A9%E9%98%B5%E8%A6%86%E7%9B%96/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-矩阵覆盖/</id>
    <published>2019-01-15T12:57:09.000Z</published>
    <updated>2019-01-15T12:58:57.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>类似跳台阶的题目，同样是根据数学归纳法来做。这也启示我，当遇到当n=?时的题目时，一般采用数学归纳法来做，找出归纳公式。此题为斐波那契数列。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rectCover</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">1</span>, second = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> result = number;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=number; i++)&#123;</span><br><span class="line">            result = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-变态跳台阶</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-变态跳台阶/</id>
    <published>2019-01-15T12:42:36.000Z</published>
    <updated>2019-01-15T12:46:43.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>经过之前的跳台阶一题，我也有了一定的经验教训，直接采用数学归纳法来做这题。很快便得到了递推的公式，result = 2^(number-1)。不再赘述，这题的关键便是找到规律，根据数学归纳法总结公式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloorII</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">2</span>,number<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int a=1; return a&lt;&lt;(number-1);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看到有人说用移位操作更快，但其实比我直接调用pow来写慢了1ms。哈哈哈~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-跳台阶</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-跳台阶/</id>
    <published>2019-01-15T12:35:14.000Z</published>
    <updated>2019-01-15T12:38:27.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>原来这个是数学归纳题，而我却误以为则应该是很难得动态规划之类的题目。其实最重要的，是分析求解的思路，找到规律或方法。这题如果能够认真的归纳，可以发现其实就如同斐波那契数列。当n=1时结果为1，当n=2时结果为2，之后地再直接递推便可得到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloor</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> first=<span class="number">1</span>, second=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> result = number;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=number; i++)&#123;</span><br><span class="line">            result = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。&lt;/p
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-斐波那契数列</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-斐波那契数列/</id>
    <published>2019-01-15T12:04:57.000Z</published>
    <updated>2019-01-15T12:12:20.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。<br>n&lt;=39</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>根据以往经验可以知道，计算斐波那契数列不适合用递归的写法，因此我并没有考虑写递归，而是书写了for循环的版本来替代。最开始的写法如下。这样的写法也对，但是相比另一种for循环版本而言，需要耗费一点点的存储空间，因此也有了第二种写法。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp[<span class="number">40</span>];</span><br><span class="line">        temp[<span class="number">0</span>] = <span class="number">0</span>, temp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            temp[i] = temp[i<span class="number">-1</span>] + temp[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">0</span>, second = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> result=n; <span class="comment">//!!!</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            result = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里需要注意的是，result应该要初始化，因为n可能等于0或1，而导致无法进入for循环。而n=0时result为0，n=1时result为1，因此比较适合于将result初始值设置为n。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。&lt;br&gt;n&amp;lt;=3
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-旋转数组的最小数字</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-旋转数组的最小数字/</id>
    <published>2019-01-15T11:53:17.000Z</published>
    <updated>2019-01-15T12:13:55.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="最笨的方法"><a href="#最笨的方法" class="headerlink" title="最笨的方法"></a>最笨的方法</h2><p>一轮遍历查找，算法复杂度为O(n)，这样肯定找不到工作。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rotateArray.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min_num = rotateArray[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;rotateArray.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min_num &gt; rotateArray[i])</span><br><span class="line">                min_num = rotateArray[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min_num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="调用sort函数"><a href="#调用sort函数" class="headerlink" title="调用sort函数"></a>调用sort函数</h2><p>这个我还真没想到，不过面试的时候，面试官肯定不会希望出现这种答案，笔试倒是可以这么写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        sort(rotateArray.begin(), rotateArray.end());</span><br><span class="line">        <span class="keyword">return</span> rotateArray[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>因为这题之前做过，所以有印象。与二分查找的思想类似，不进行赘述。但是在做的时候遇到了超时的情况，原因是自己在更新low变量时写成了low=mid，这样会导致每次得到的新数组中总有一个大的数，因此不正确；相反的，high之所以等于mid，是因为mid数可能就是最小值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = rotateArray.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> minNumber(rotateArray, low, high); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(low != high)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rotateArray[mid] &lt;= rotateArray[high])</span><br><span class="line">                high = mid;</span><br><span class="line">            <span class="keyword">else</span> low = mid+<span class="number">1</span>;</span><br><span class="line">            mid = (low+high) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rotateArray[mid];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-用两个栈实现队列</title>
    <link href="https://github.com/DesmonDay/2019/01/14/%E5%89%91%E6%8C%87Offer-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://github.com/DesmonDay/2019/01/14/剑指Offer-用两个栈实现队列/</id>
    <published>2019-01-14T13:27:27.000Z</published>
    <updated>2019-01-14T13:32:00.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>题目简单，但是我和之前在考研复习时所做的一题弄混了。王道书上的栈是用顺序表实现的，有长度的规定，而这道题是用STL模板库的栈，栈没有元素数目的限制，因此在入栈时直接入栈即可，不需要考虑其他情况。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        <span class="keyword">if</span>(!stack2.empty())&#123;</span><br><span class="line">            result = stack2.top();</span><br><span class="line">            stack2.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.empty())&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = stack1.top();</span><br><span class="line">                stack1.pop();</span><br><span class="line">                stack2.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            result = stack2.top();</span><br><span class="line">            stack2.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack1;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。&lt;/p&gt;
&lt;h1 id=&quot;思路分析&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-重建二叉树</title>
    <link href="https://github.com/DesmonDay/2019/01/14/%E5%89%91%E6%8C%87Offer-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://github.com/DesmonDay/2019/01/14/剑指Offer-重建二叉树/</id>
    <published>2019-01-14T11:44:33.000Z</published>
    <updated>2019-01-14T13:05:18.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这题不应该写不出来，要记住的是，不仅仅中序遍历的序列要划分为左右子树的部分，前序遍历也需要划分为左右子树！！用递归来做，因为自己在举例子时把前序遍历写错了，导致一开始难以理解，很不应该！！要理解这样做的原因，并且会举一反三。</p><p>此题注意点：</p><ol><li>必须要加递归结束条件！！即判断序列是否为空，若为空，说明到了叶结点，返回NULL；</li><li>根据根节点划分左右子树序列，这个是个基础知识点；</li><li>做题时遇到很奇怪的问题，见以下代码</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; </span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">reConstructBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vin)</span> </span>&#123;       </span><br><span class="line">        <span class="comment">/*static int j=0;</span></span><br><span class="line"><span class="comment">        int temp = pre[j++];*/</span> <span class="comment">//这样做不对，前序遍历的序列也要进行左右子树的划分</span></span><br><span class="line">        <span class="keyword">if</span>(pre.empty() || vin.empty()) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//if(vsize == 0) return NULL;</span></span><br><span class="line">        TreeNode *head = <span class="keyword">new</span> TreeNode(pre[<span class="number">0</span>]); <span class="comment">//TreeNode的构造函数</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre1, pre2, vin1, vin2;<span class="comment">//划分左右子树的前中遍历序列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        int mid;</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;vin.size(); i++)&#123;//在中序遍历中找对应的根结点</span></span><br><span class="line"><span class="comment">            if(pre[0] == vin[i]) //这里没有加括号，导致错误！</span></span><br><span class="line"><span class="comment">                mid = i;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">for</span>(mid=<span class="number">0</span>; mid&lt;vin.size(); mid++)&#123;<span class="comment">//在中序遍历中找对应的根结点</span></span><br><span class="line">            <span class="keyword">if</span>(pre[<span class="number">0</span>] == vin[mid]) </span><br><span class="line">                <span class="comment">//mid = i;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;vin.size(); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; mid)&#123;</span><br><span class="line">                vin1.push_back(vin[j]);</span><br><span class="line">                pre1.push_back(pre[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; mid)&#123;</span><br><span class="line">                vin2.push_back(vin[j]);</span><br><span class="line">                pre2.push_back(pre[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;left = reConstructBinaryTree(pre1, vin1);</span><br><span class="line">        head-&gt;right = reConstructBinaryTree(pre2, vin2);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，注释部分的功能是为了得到mid，注释下方的代码也是一样。但若是用注释部分的代码，结果却是错误的！！</p><p>后序：是自己白痴了！！唉，注释那里，if判断语句，没有加大括号。教训：就算括号体内只有一句，也要加括号，避免以后要添加语句时忘记加。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
</feed>
