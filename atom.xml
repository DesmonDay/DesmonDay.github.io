<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DesmonDay&#39;s Blog</title>
  
  <subtitle>一只小辣鸡的自我拯救之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/DesmonDay/"/>
  <updated>2019-01-18T09:15:27.448Z</updated>
  <id>https://github.com/DesmonDay/</id>
  
  <author>
    <name>Desmon Day</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指Offer-合并两个排序的链表</title>
    <link href="https://github.com/DesmonDay/2019/01/18/%E5%89%91%E6%8C%87Offer-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
    <id>https://github.com/DesmonDay/2019/01/18/剑指Offer-合并两个排序的链表/</id>
    <published>2019-01-18T09:04:28.000Z</published>
    <updated>2019-01-18T09:15:27.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>想不到自己做对了，没遇到什么因为指针而错误的坑！算是一个小小的进步吧。虽然有个地方，因为我不知道动态内存怎么申请的，所以一开始有点卡，struct申请：ListNode* head = new ListNode(0); 这是在有构造函数的情况下，若没有，则直接new再加上结构体的名称。</p><p>至于算法本身，直接根据大小进行合并即可，下面这个是非递归的版本。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 单调递增</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">Merge</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span></span>&#123;</span><br><span class="line">        ListNode* head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">//记住！</span></span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span>(pHead1 &amp;&amp; pHead2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pHead1-&gt;val &lt;= pHead2-&gt;val)&#123;</span><br><span class="line">                p-&gt;next = pHead1;</span><br><span class="line">                pHead1 = pHead1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                p-&gt;next = pHead2;</span><br><span class="line">                pHead2 = pHead2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pHead1) p-&gt;next = pHead1;</span><br><span class="line">        <span class="keyword">if</span>(pHead2) p-&gt;next = pHead2;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>下面这个是学习别人的递归版本。其实，递归写起来是比较短小精悍的，但关键就是要明白，结束条件是什么，怎么写递归，这也始终是我的一个短板。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 单调递增</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">Merge</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">NULL</span>) <span class="keyword">return</span> pHead2;</span><br><span class="line">        <span class="keyword">if</span>(pHead2 == <span class="literal">NULL</span>) <span class="keyword">return</span> pHead1;</span><br><span class="line">        ListNode* head = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(pHead1-&gt;val &lt; pHead2-&gt;val)&#123;</span><br><span class="line">            head = pHead1;</span><br><span class="line">            head-&gt;next = Merge(pHead1-&gt;next, pHead2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            head = pHead2;</span><br><span class="line">            head-&gt;next = Merge(pHead1, pHead2-&gt;next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。&lt;/p&gt;
&lt;h1 id=&quot;解题思
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-反转链表</title>
    <link href="https://github.com/DesmonDay/2019/01/18/%E5%89%91%E6%8C%87Offer-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://github.com/DesmonDay/2019/01/18/剑指Offer-反转链表/</id>
    <published>2019-01-18T07:44:27.000Z</published>
    <updated>2019-01-18T08:47:32.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个链表，反转链表后，输出新链表的表头。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>哎，惭愧，这题我没有做出来。然而，本应该是一道很基础的题目。我现在会两种写法，一是利用栈，二是利用头插法。这里就各自重写一次。另外，链表题要特别注意为空的情况。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList1</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead==<span class="literal">NULL</span> || pHead-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> pHead;</span><br><span class="line">        ListNode* p = pHead;</span><br><span class="line">        <span class="built_in">stack</span>&lt;ListNode*&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next)&#123;</span><br><span class="line">            s.push(p);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* NewHead = p;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            p-&gt;next = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> NewHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList2</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead==<span class="literal">NULL</span> || pHead-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> pHead;</span><br><span class="line">        ListNode* p = pHead;</span><br><span class="line">        ListNode* q = pHead-&gt;next;</span><br><span class="line">        pHead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* r = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(q)&#123;</span><br><span class="line">            r = q-&gt;next;</span><br><span class="line">            q-&gt;next = p;</span><br><span class="line">            p = q;</span><br><span class="line">            q = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后还看到一种递归的写法，但是不太懂，就不写了。链表题通常要注意以下两点：</p><ol><li>如果输入的头结点是 NULL，或者整个链表只有一个结点的时候</li><li>链表断裂的考虑</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个链表，反转链表后，输出新链表的表头。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-调整数组顺序使奇数位于偶数前面</title>
    <link href="https://github.com/DesmonDay/2019/01/16/%E5%89%91%E6%8C%87Offer-%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/"/>
    <id>https://github.com/DesmonDay/2019/01/16/剑指Offer-调整数组顺序使奇数位于偶数前面/</id>
    <published>2019-01-16T14:01:16.000Z</published>
    <updated>2019-01-16T14:05:23.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>一开始把题目看错了，没有看到要求相对位置不变，因此使用了类似于快排的方法来做（这个也应该是一个可能的考点）。由于要求相对位置不变，我的想法很简单，将奇数和偶数分别按顺序存储在两个vector中，再修改原始vector数组中的数字，但这样就占用了存储空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">array</span>[i] % <span class="number">2</span> != <span class="number">0</span>)&#123; <span class="comment">//奇数</span></span><br><span class="line">                a1.push_back(<span class="built_in">array</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> a2.push_back(<span class="built_in">array</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a1.size(); i++)&#123;</span><br><span class="line">            <span class="built_in">array</span>[i] = a1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=a1.size(); i&lt;<span class="built_in">array</span>.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = i-a1.size();</span><br><span class="line">            <span class="built_in">array</span>[i] = a2[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在牛客网上看到一个短小精悍的代码，有点类似冒泡排序。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="built_in">array</span>.size()<span class="number">-1</span>; j&gt;i; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">array</span>[j]%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; <span class="built_in">array</span>[j<span class="number">-1</span>]%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                    swap(<span class="built_in">array</span>[j], <span class="built_in">array</span>[j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>多学学！！同时，尽量熟悉使用vector来答题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-数值的整数次方(快速幂)</title>
    <link href="https://github.com/DesmonDay/2019/01/16/%E5%89%91%E6%8C%87Offer-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9-%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://github.com/DesmonDay/2019/01/16/剑指Offer-数值的整数次方-快速幂/</id>
    <published>2019-01-16T09:15:57.000Z</published>
    <updated>2019-01-16T12:14:57.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>参考博客：<a href="https://www.cnblogs.com/lca1826/p/6748372.html" target="_blank" rel="noopener">https://www.cnblogs.com/lca1826/p/6748372.html</a></p><p>惭愧，第一个想到的方法居然是调用pow()函数，而且也过了。实际上这道题目是要考察快速幂的知识。快速幂的目的就是做到快速求幂，假设我们要求a^b,按照朴素算法就是把a连乘b次，这样一来时间复杂度是O(b)也即是O(n)级别，快速幂能做到O(logn)，快了很多。</p><p>其原理如下： 假设我们要求a^b，那么其实b是可以拆成二进制的，该二进制数第i位的权为2^(i-1)，例如当b==11时，a^11=a^(2^0+2^1+2^3)，11的二进制是1011，11 = 2³×1 + 2²×0 + 2¹×1 + 2º×1，因此，我们将a¹¹转化为算 a^(2^0)*a^(2^1)*a^(2^3) ，看出来快的多了吧原来算11次，现在算三次。</p><p>由于是二进制，很自然想到使用位运算：&amp;和&gt;&gt;。&amp;运算通常用于二进制取位操作，例如一个数&amp;1的结果就是取二进制的最末位。还可以判断奇偶x&amp;1==0为偶，x&amp;1==1为奇。&gt;&gt;运算比较单纯,二进制去掉最后一位。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poww</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>,base=a;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>!=<span class="number">0</span>)</span><br><span class="line">        　　ans*=base;</span><br><span class="line">        base*=base;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">　 &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而需要注意的是，上面的b仅仅针对正数而言，因此在做题时需要考虑负数的情况，最终算法的书写结果如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> p = <span class="built_in">abs</span>((<span class="keyword">long</span> <span class="keyword">long</span>) exponent);</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p &amp; <span class="number">1</span>) </span><br><span class="line">                res *= base;</span><br><span class="line">            base *= base;</span><br><span class="line">            p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exponent&gt;<span class="number">0</span> ? res : <span class="number">1</span>/res; <span class="comment">// 判断正负</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-二进制中1的个数</title>
    <link href="https://github.com/DesmonDay/2019/01/16/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://github.com/DesmonDay/2019/01/16/剑指Offer-二进制中1的个数/</id>
    <published>2019-01-16T08:52:22.000Z</published>
    <updated>2019-01-16T09:00:05.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>我一开始的方法是最蠢笨的，即将整数表示为二进制位数，再依次数其中1的个数。由于负数是用补码表示的，因此负数这个情况花了不少时间。特别是最后有个特例始终过不了，只能添加了一个if判断语句，这才通过。蠢笨代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123; <span class="comment">// 正数</span></span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>, temp1 = n, temp2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(temp1 != <span class="number">0</span>)&#123;</span><br><span class="line">                temp2 = temp1 % <span class="number">2</span>;</span><br><span class="line">                temp1 = temp1 / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(temp2 == <span class="number">1</span>) cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">// 负数</span></span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">-2147483648</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>, temp1 = <span class="built_in">abs</span>(n), temp2 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> num[<span class="number">32</span>]; <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(temp1 != <span class="number">0</span>)&#123;</span><br><span class="line">                    temp2 = temp1 % <span class="number">2</span>;</span><br><span class="line">                    temp1 = temp1 / <span class="number">2</span>;</span><br><span class="line">                    <span class="comment">// 取反</span></span><br><span class="line">                    <span class="keyword">if</span>(temp2 == <span class="number">1</span>) num[i] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> num[i] = <span class="number">1</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 加1</span></span><br><span class="line">                <span class="keyword">int</span> n = i;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=n; j&lt;<span class="number">32</span>; j++) num[j] = <span class="number">1</span>;</span><br><span class="line">                i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(num[<span class="number">0</span>] == <span class="number">0</span>) num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    num[<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">                    <span class="keyword">while</span>(num[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                        num[i] = <span class="number">0</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt;= n<span class="number">-1</span>) num[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(num[i] == <span class="number">1</span>) cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外，其实还有一个问题是，整数为int型，这种做法还得考虑int是32位的。很复杂！！</p><h1 id="更简便方法"><a href="#更简便方法" class="headerlink" title="更简便方法"></a>更简便方法</h1><p>下面是从牛客看到的一个简单的方法。参考：<a href="https://www.nowcoder.com/profile/9536154/codeBookDetail?submissionId=17465787" target="_blank" rel="noopener">https://www.nowcoder.com/profile/9536154/codeBookDetail?submissionId=17465787</a>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n!= <span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下代码： 这段小小的代码，很是巧妙。</p><p>如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。</p><p>举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么<strong>一个整数的二进制有多少个1，就可以进行多少次这样的操作</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-矩阵覆盖</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E7%9F%A9%E9%98%B5%E8%A6%86%E7%9B%96/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-矩阵覆盖/</id>
    <published>2019-01-15T12:57:09.000Z</published>
    <updated>2019-01-15T12:58:57.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>类似跳台阶的题目，同样是根据数学归纳法来做。这也启示我，当遇到当n=?时的题目时，一般采用数学归纳法来做，找出归纳公式。此题为斐波那契数列。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rectCover</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">1</span>, second = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> result = number;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=number; i++)&#123;</span><br><span class="line">            result = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-变态跳台阶</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-变态跳台阶/</id>
    <published>2019-01-15T12:42:36.000Z</published>
    <updated>2019-01-15T12:46:43.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>经过之前的跳台阶一题，我也有了一定的经验教训，直接采用数学归纳法来做这题。很快便得到了递推的公式，result = 2^(number-1)。不再赘述，这题的关键便是找到规律，根据数学归纳法总结公式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloorII</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">2</span>,number<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int a=1; return a&lt;&lt;(number-1);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看到有人说用移位操作更快，但其实比我直接调用pow来写慢了1ms。哈哈哈~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-跳台阶</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-跳台阶/</id>
    <published>2019-01-15T12:35:14.000Z</published>
    <updated>2019-01-15T12:38:27.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>原来这个是数学归纳题，而我却误以为则应该是很难得动态规划之类的题目。其实最重要的，是分析求解的思路，找到规律或方法。这题如果能够认真的归纳，可以发现其实就如同斐波那契数列。当n=1时结果为1，当n=2时结果为2，之后地再直接递推便可得到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloor</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> first=<span class="number">1</span>, second=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> result = number;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=number; i++)&#123;</span><br><span class="line">            result = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。&lt;/p
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-斐波那契数列</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-斐波那契数列/</id>
    <published>2019-01-15T12:04:57.000Z</published>
    <updated>2019-01-15T12:12:20.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。<br>n&lt;=39</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>根据以往经验可以知道，计算斐波那契数列不适合用递归的写法，因此我并没有考虑写递归，而是书写了for循环的版本来替代。最开始的写法如下。这样的写法也对，但是相比另一种for循环版本而言，需要耗费一点点的存储空间，因此也有了第二种写法。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp[<span class="number">40</span>];</span><br><span class="line">        temp[<span class="number">0</span>] = <span class="number">0</span>, temp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            temp[i] = temp[i<span class="number">-1</span>] + temp[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">0</span>, second = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> result=n; <span class="comment">//!!!</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            result = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里需要注意的是，result应该要初始化，因为n可能等于0或1，而导致无法进入for循环。而n=0时result为0，n=1时result为1，因此比较适合于将result初始值设置为n。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。&lt;br&gt;n&amp;lt;=3
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-旋转数组的最小数字</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-旋转数组的最小数字/</id>
    <published>2019-01-15T11:53:17.000Z</published>
    <updated>2019-01-15T12:13:55.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="最笨的方法"><a href="#最笨的方法" class="headerlink" title="最笨的方法"></a>最笨的方法</h2><p>一轮遍历查找，算法复杂度为O(n)，这样肯定找不到工作。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rotateArray.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> min_num = rotateArray[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;rotateArray.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min_num &gt; rotateArray[i])</span><br><span class="line">                min_num = rotateArray[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min_num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="调用sort函数"><a href="#调用sort函数" class="headerlink" title="调用sort函数"></a>调用sort函数</h2><p>这个我还真没想到，不过面试的时候，面试官肯定不会希望出现这种答案，笔试倒是可以这么写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        sort(rotateArray.begin(), rotateArray.end());</span><br><span class="line">        <span class="keyword">return</span> rotateArray[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>因为这题之前做过，所以有印象。与二分查找的思想类似，不进行赘述。但是在做的时候遇到了超时的情况，原因是自己在更新low变量时写成了low=mid，这样会导致每次得到的新数组中总有一个大的数，因此不正确；相反的，high之所以等于mid，是因为mid数可能就是最小值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = rotateArray.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> minNumber(rotateArray, low, high); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(low != high)&#123;</span><br><span class="line">            <span class="keyword">if</span>(rotateArray[mid] &lt;= rotateArray[high])</span><br><span class="line">                high = mid;</span><br><span class="line">            <span class="keyword">else</span> low = mid+<span class="number">1</span>;</span><br><span class="line">            mid = (low+high) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rotateArray[mid];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-用两个栈实现队列</title>
    <link href="https://github.com/DesmonDay/2019/01/14/%E5%89%91%E6%8C%87Offer-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://github.com/DesmonDay/2019/01/14/剑指Offer-用两个栈实现队列/</id>
    <published>2019-01-14T13:27:27.000Z</published>
    <updated>2019-01-14T13:32:00.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>题目简单，但是我和之前在考研复习时所做的一题弄混了。王道书上的栈是用顺序表实现的，有长度的规定，而这道题是用STL模板库的栈，栈没有元素数目的限制，因此在入栈时直接入栈即可，不需要考虑其他情况。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        <span class="keyword">if</span>(!stack2.empty())&#123;</span><br><span class="line">            result = stack2.top();</span><br><span class="line">            stack2.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.empty())&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = stack1.top();</span><br><span class="line">                stack1.pop();</span><br><span class="line">                stack2.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            result = stack2.top();</span><br><span class="line">            stack2.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack1;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。&lt;/p&gt;
&lt;h1 id=&quot;思路分析&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-重建二叉树</title>
    <link href="https://github.com/DesmonDay/2019/01/14/%E5%89%91%E6%8C%87Offer-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://github.com/DesmonDay/2019/01/14/剑指Offer-重建二叉树/</id>
    <published>2019-01-14T11:44:33.000Z</published>
    <updated>2019-01-14T13:05:18.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这题不应该写不出来，要记住的是，不仅仅中序遍历的序列要划分为左右子树的部分，前序遍历也需要划分为左右子树！！用递归来做，因为自己在举例子时把前序遍历写错了，导致一开始难以理解，很不应该！！要理解这样做的原因，并且会举一反三。</p><p>此题注意点：</p><ol><li>必须要加递归结束条件！！即判断序列是否为空，若为空，说明到了叶结点，返回NULL；</li><li>根据根节点划分左右子树序列，这个是个基础知识点；</li><li>做题时遇到很奇怪的问题，见以下代码</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; </span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">reConstructBinaryTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vin)</span> </span>&#123;       </span><br><span class="line">        <span class="comment">/*static int j=0;</span></span><br><span class="line"><span class="comment">        int temp = pre[j++];*/</span> <span class="comment">//这样做不对，前序遍历的序列也要进行左右子树的划分</span></span><br><span class="line">        <span class="keyword">if</span>(pre.empty() || vin.empty()) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//if(vsize == 0) return NULL;</span></span><br><span class="line">        TreeNode *head = <span class="keyword">new</span> TreeNode(pre[<span class="number">0</span>]); <span class="comment">//TreeNode的构造函数</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre1, pre2, vin1, vin2;<span class="comment">//划分左右子树的前中遍历序列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        int mid;</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;vin.size(); i++)&#123;//在中序遍历中找对应的根结点</span></span><br><span class="line"><span class="comment">            if(pre[0] == vin[i]) //这里没有加括号，导致错误！</span></span><br><span class="line"><span class="comment">                mid = i;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">int</span> mid;</span><br><span class="line">        <span class="keyword">for</span>(mid=<span class="number">0</span>; mid&lt;vin.size(); mid++)&#123;<span class="comment">//在中序遍历中找对应的根结点</span></span><br><span class="line">            <span class="keyword">if</span>(pre[<span class="number">0</span>] == vin[mid]) </span><br><span class="line">                <span class="comment">//mid = i;</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;vin.size(); j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; mid)&#123;</span><br><span class="line">                vin1.push_back(vin[j]);</span><br><span class="line">                pre1.push_back(pre[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; mid)&#123;</span><br><span class="line">                vin2.push_back(vin[j]);</span><br><span class="line">                pre2.push_back(pre[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;left = reConstructBinaryTree(pre1, vin1);</span><br><span class="line">        head-&gt;right = reConstructBinaryTree(pre2, vin2);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以看到，注释部分的功能是为了得到mid，注释下方的代码也是一样。但若是用注释部分的代码，结果却是错误的！！</p><p>后序：是自己白痴了！！唉，注释那里，if判断语句，没有加大括号。教训：就算括号体内只有一句，也要加括号，避免以后要添加语句时忘记加。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-从尾到头打印链表</title>
    <link href="https://github.com/DesmonDay/2019/01/14/%E5%89%91%E6%8C%87Offer-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>https://github.com/DesmonDay/2019/01/14/剑指Offer-从尾到头打印链表/</id>
    <published>2019-01-14T09:21:07.000Z</published>
    <updated>2019-01-14T09:27:26.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>思路很简单，直接利用栈即可。比较坑的是，我在判断是否到达链表末尾那里出了点问题，因此总是导致段错误。以后就记住了，如果在while循环里不需要对p-&gt;next进行操作之类的，则直接循环条件为p!=next。</p><pre><code class="cpp"><span class="comment">/**</span><span class="comment">*  struct ListNode {</span><span class="comment">*        int val;</span><span class="comment">*        struct ListNode *next;</span><span class="comment">*        ListNode(int x) :</span><span class="comment">*              val(x), next(NULL) {</span><span class="comment">*        }</span><span class="comment">*  };</span><span class="comment">*/</span><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span><span class="keyword">public</span>:    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printListFromTailToHead(ListNode* head) {        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;        ListNode *p = head;        <span class="keyword">while</span>(p != <span class="literal">NULL</span>){            s.push(p-&gt;val);            p = p-&gt;next;        }        <span class="keyword">int</span> temp;        <span class="keyword">while</span>(!s.empty()){            temp = s.top();            s.pop();            v.push_back(temp);        }        <span class="keyword">return</span> v;    }};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-替换空格</title>
    <link href="https://github.com/DesmonDay/2019/01/14/%E5%89%91%E6%8C%87Offer-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>https://github.com/DesmonDay/2019/01/14/剑指Offer-替换空格/</id>
    <published>2019-01-14T04:53:10.000Z</published>
    <updated>2019-01-14T08:57:58.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>将一个字符串中的空格替换成 “%20”。</p><p>Input:<br>“We Are Happy”</p><p>Output:<br>“We%20Are%20Happy”</p><h1 id="C-求长度相关知识"><a href="#C-求长度相关知识" class="headerlink" title="C++求长度相关知识"></a>C++求长度相关知识</h1><p>在C/C++中常用的获取字符串长度或者字符串数组长度的函数有：sizeof(), length(), strlen(), size().其中strlen(str)和str.length()和str.size()都可以用来求字符串的长度。str.length()和str.size()是用于求string类对象的成员函数，strlen(str) 是用于求字符串数组的长度，其参数是char*。</p><h2 id="strlen-和sizeof-的区别。"><a href="#strlen-和sizeof-的区别。" class="headerlink" title="strlen()和sizeof()的区别。"></a>strlen()和sizeof()的区别。</h2><p>strlen(char*):函数求是字符串的实际长度，它可以用来获取动态实际字符数组的长度，是从开始到遇到第一个“\0”，如果只是定义没有赋予初始值，这个结果是不确定的，它会从数组的首地址开始一直找下去，直到遇到”\0”停止查找。</p><p>sizeof(): 求所占总空间的字节数，<strong>静态</strong>的，跟初始状态字符数组的大小有关系，大小等于初始时字符数组的大小或者等于初始时字符数组的大小+1。<br>在C++中，如果定义的是字符串数组的话，那么如果想获取数组的长度，只能用sizeof(数组名)，而不能用strlen(str)。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>这一题我不知道是否可以直接修改char数组，使增加长度。做了两种方法都不对，因此直接看了答案。第一种是牛客网上的形式，根据其给出的函数包装形式来写成答案。比较好理解。</p><p>思路为：先记录空格数目，确定新的数组长度，再从后向前进行替换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">replaceSpace</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">int</span> length)</span> </span>&#123; <span class="comment">//这里的length是指最大长度！</span></span><br><span class="line">        <span class="keyword">if</span>(!str || length&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>, oldlen=<span class="number">0</span>, count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(str[i] != <span class="string">'\0'</span>)&#123; <span class="comment">//从头到尾遍历，根据'\0'判断到达末尾，而不需要知道长度</span></span><br><span class="line">            oldlen++;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">' '</span>)</span><br><span class="line">                count++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> newlen = oldlen + count*<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(newlen &gt; length) <span class="keyword">return</span>; </span><br><span class="line">        i = oldlen;</span><br><span class="line">        <span class="keyword">int</span> j = newlen;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;=<span class="number">0</span> &amp;&amp; j &gt; i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] == <span class="string">' '</span>)&#123;</span><br><span class="line">                str[j--] = <span class="string">'0'</span>;</span><br><span class="line">                str[j--] = <span class="string">'2'</span>;</span><br><span class="line">                str[j--] = <span class="string">'%'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                str[j--] = str[i];</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;将一个字符串中的空格替换成 “%20”。&lt;/p&gt;
&lt;p&gt;Input:&lt;br&gt;“We Are Happy”&lt;/p&gt;
&lt;p&gt;Ou
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="c++" scheme="https://github.com/DesmonDay/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-二维数组中的查找</title>
    <link href="https://github.com/DesmonDay/2019/01/14/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>https://github.com/DesmonDay/2019/01/14/剑指Offer-二维数组中的查找/</id>
    <published>2019-01-14T04:42:32.000Z</published>
    <updated>2019-01-14T04:49:21.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><img src="https://upload-images.jianshu.io/upload_images/8636110-24b13e76cd83fd16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>参考github: <a href="https://github.com/CyC2018/CS-Notes">https://github.com/CyC2018/CS-Notes</a></p><p>一开始的想法就是很直接的，直接一行行的查找，因此时间复杂度也相对会大一些，尽管也能够通过，但却是最笨的方法。下面写写时间复杂度为O(M+N)+O(1)的写法。</p><p>从右上角开始查找。矩阵中的一个数，它左边的数都比它小，下边的数都比它大。因此，从右上角开始查找，就可以根据 target 和当前元素的大小关系来缩小查找区间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*bool Find(int target, vector&lt;vector&lt;int&gt; &gt; array) &#123;</span></span><br><span class="line"><span class="comment">        for(int i=0; i&lt;array.size(); i++)&#123;</span></span><br><span class="line"><span class="comment">            for(int j=0; j&lt;array[0].size(); j++)&#123;</span></span><br><span class="line"><span class="comment">                if(array[i][j] == target) return 1;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">array</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rows = <span class="built_in">array</span>.size(), cols = <span class="built_in">array</span>[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, c = cols<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(r &lt;= rows<span class="number">-1</span> &amp;&amp; c &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target == <span class="built_in">array</span>[r][c]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target &gt; <span class="built_in">array</span>[r][c]) r++;</span><br><span class="line">            <span class="keyword">else</span> c--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow重新开始-1</title>
    <link href="https://github.com/DesmonDay/2019/01/11/Tensorflow1/"/>
    <id>https://github.com/DesmonDay/2019/01/11/Tensorflow1/</id>
    <published>2019-01-11T08:29:38.000Z</published>
    <updated>2019-01-14T04:43:41.020Z</updated>
    
    <content type="html"><![CDATA[<p>之前曾经学习过一阵子，但是时间赶，并没有懂得什么东西，甚至于当时由于在C盘跑深度学习程序而把电脑的重要文件给误删了。这阵子打算重新开始学习Tensorflow，主要基于《Tensorflow实战Google深度学习框架》这本书。</p><p>最开始的简单程序：</p><p><img src="https://upload-images.jianshu.io/upload_images/8636110-b0027e3f3b6ed3be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>通过TensorBoard可视化向量相加的计算图：<br><img src="https://upload-images.jianshu.io/upload_images/8636110-757943af22bd3113.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">（matrix1对应a, matrix2对应b，product对应add)</p><h1 id="Tensorflow三大模型"><a href="#Tensorflow三大模型" class="headerlink" title="Tensorflow三大模型"></a>Tensorflow三大模型</h1><p>包括计算模型、数据模型和运行模型</p><h2 id="Tensorflow计算模型：计算图"><a href="#Tensorflow计算模型：计算图" class="headerlink" title="Tensorflow计算模型：计算图"></a>Tensorflow计算模型：计算图</h2><p>Tensorflow是一个通过计算图的形式来表述计算的编程系统。Tensorflow中的每一个计算都是计算图上的一个节点，而节点之间的边描述了计算之间的依赖关系。如上图，所有Tensorflow的程序都可以通过类似上图的计算图的形式来表示，这便是TensorFlow的基本计算模型。</p><h3 id="计算图的使用"><a href="#计算图的使用" class="headerlink" title="计算图的使用"></a>计算图的使用</h3><p>两个阶段：定义计算阶段，执行计算阶段</p><p>计算阶段：</p><p><img src="https://upload-images.jianshu.io/upload_images/8636110-b0027e3f3b6ed3be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>通过tf.get_default_graph函数可以获取当前默认的计算图：（通过a.graph可以查看张量所属的计算图。由于没有特意指定，所以这个计算图等于当前默认的计算图，因此输出为True）</p><p><img src="https://upload-images.jianshu.io/upload_images/8636110-803f460a7f4808fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>除默认的计算图，Tensorflow支持通过tf.Graph函数来生成新的计算图。<strong>不同计算图上的张量和运算不会共享。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前曾经学习过一阵子，但是时间赶，并没有懂得什么东西，甚至于当时由于在C盘跑深度学习程序而把电脑的重要文件给误删了。这阵子打算重新开始学习Tensorflow，主要基于《Tensorflow实战Google深度学习框架》这本书。&lt;/p&gt;
&lt;p&gt;最开始的简单程序：&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Tensorflow" scheme="https://github.com/DesmonDay/categories/Tensorflow/"/>
    
    
      <category term="python" scheme="https://github.com/DesmonDay/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>算法阅读笔记--排序</title>
    <link href="https://github.com/DesmonDay/2018/07/15/%E7%AE%97%E6%B3%95%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E6%8E%92%E5%BA%8F/"/>
    <id>https://github.com/DesmonDay/2018/07/15/算法阅读笔记-排序/</id>
    <published>2018-07-15T12:00:40.000Z</published>
    <updated>2018-07-15T12:39:44.120Z</updated>
    
    <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>对一个序列A中的元素A[1]到A[n]，令i从1到n枚举，进行n趟操作，每趟从待排序部分[i,n]中选择最小的元素，令其与待排序部分的第一个元素A[i]进行交换，这样元素A[i]就会与当前有序区间[1,i-1]形成新的有序区间[1,i]。<br>总时间复杂度为O(n^2)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectSort</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> k=i;</span><br><span class="line"><span class="keyword">for</span>(j=i; j&lt;=n; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[j]&lt;A[k])&#123;</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp = A[i];</span><br><span class="line">A[i] = A[k];</span><br><span class="line">A[k] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> A[maxn], n; <span class="comment">//n为元素个数，数组下标为1到n</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertSort</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp = A[i], j=i;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">1</span> &amp;&amp; temp&lt;A[j<span class="number">-1</span>])&#123;</span><br><span class="line">A[j] = A[j<span class="number">-1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">A[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;选择排序&quot;&gt;&lt;a href=&quot;#选择排序&quot; class=&quot;headerlink&quot; title=&quot;选择排序&quot;&gt;&lt;/a&gt;选择排序&lt;/h1&gt;&lt;p&gt;对一个序列A中的元素A[1]到A[n]，令i从1到n枚举，进行n趟操作，每趟从待排序部分[i,n]中选择最小的元素，令其与待
      
    
    </summary>
    
      <category term="笔记" scheme="https://github.com/DesmonDay/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="c++" scheme="https://github.com/DesmonDay/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>数据结构笔记(2)--线性表</title>
    <link href="https://github.com/DesmonDay/2018/06/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0-2/"/>
    <id>https://github.com/DesmonDay/2018/06/19/数据结构笔记-2/</id>
    <published>2018-06-19T10:38:52.000Z</published>
    <updated>2018-06-20T04:38:27.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性表是最常用且最简单的一种数据结构。在稍复杂的线性表中，一个数据元素可以由若干个数据项组成。在这种情况下，常把数据元素称为记录，含有大量记录的线性表又称文件。</p><p>线性表是一个相当灵活的数据结构，它的长度可以根据需要增长或缩短，即对线性表的数据元素不仅可以进行访问，还可以进行插入和删除等。</p><h2 id="线性链表"><a href="#线性链表" class="headerlink" title="线性链表"></a>线性链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*************线性链表***********/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList; <span class="comment">//定义别名LinkList，则可以直接LinkList a;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 按位置查找</span></span><br><span class="line"><span class="function">Status <span class="title">GetElem_L</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType &amp;e)</span></span>&#123;</span><br><span class="line"><span class="comment">// L为带头结点的单链表的头指针</span></span><br><span class="line"><span class="comment">// 当第i个元素存在时，其值赋给e并返回ok，否则返回error</span></span><br><span class="line">p = L-&gt;next;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(p &amp;&amp; j&lt;i)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!p || j&gt;i) <span class="keyword">return</span> ERROR;</span><br><span class="line">e = p-&gt;data;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在第i个位置前插入e</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert_L</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line">p = L;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!p &amp;&amp; j&gt;i<span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">s = (LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode)); <span class="comment">//生成新结点</span></span><br><span class="line">s-&gt;data = e;</span><br><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete_L</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line">p = L;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(p-&gt;next) || j&gt;i<span class="number">-1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">q = p-&gt;next;</span><br><span class="line">p-&gt;next = q-&gt;next;</span><br><span class="line">e = q-&gt;data;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从表尾到表头逆向建立单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatList_L</span><span class="params">(LinkList &amp;L, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (i=n; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line"><span class="built_in">scanf</span>(&amp;p-&gt;data);</span><br><span class="line">p-&gt;next = L-&gt;next;</span><br><span class="line">L-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并有序链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeList_L</span><span class="params">(LinkList &amp;La, LinkList &amp;Lb, LinkList &amp;Lc)</span></span>&#123;</span><br><span class="line">pa = La-&gt;next;</span><br><span class="line">pb = Lb-&gt;next;</span><br><span class="line">Lc = pc = La;</span><br><span class="line"><span class="keyword">while</span>(pa &amp;&amp; pb)&#123;</span><br><span class="line"><span class="keyword">if</span>(pa-&gt;data &lt;= pb-&gt;data)&#123;</span><br><span class="line">pc-&gt;next = pa;</span><br><span class="line">pc = pa;</span><br><span class="line">pa = pa-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">pc-next = pb;</span><br><span class="line">pc = pb;</span><br><span class="line">pb = pb-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pc-&gt;next = pa?pa:pb;</span><br><span class="line"><span class="built_in">free</span>(Lb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**************静态链表**************/</span></span><br><span class="line"><span class="comment">// 借用一维数组来描述线性链表，称为静态链表</span></span><br><span class="line"><span class="comment">// 需预先分配空间，插入删除方便(仅需修改指针)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1000 <span class="comment">//链表最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="keyword">int</span> cur;</span><br><span class="line">&#125;component, SLinkList[MAXSIZE];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定位函数实现</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem_SL</span><span class="params">(SLinkList S, ElemType e)</span></span>&#123;</span><br><span class="line"><span class="comment">// 在静态单链线性表L中查找第1个值为e的元素</span></span><br><span class="line"><span class="comment">// 若找到，则返回其在L中的次序，否则返回0.</span></span><br><span class="line">i = S[<span class="number">0</span>].cur;</span><br><span class="line"><span class="keyword">while</span>(i &amp;&amp; S[i].data!=e)&#123;</span><br><span class="line">i = S[i].cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合运算(A-B)U(B-A)</span></span><br><span class="line"><span class="comment">// 1. 将整个数组空间初始化一个链表</span></span><br><span class="line"><span class="comment">// 2. 从备用空间取得一个结点</span></span><br><span class="line"><span class="comment">// 3. 将空闲结点链接到备用链表上</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitSpace_SL</span><span class="params">(SLinkList &amp;space)</span></span>&#123;</span><br><span class="line"><span class="comment">// 将一维数组space中各分量链成一个备用链表，space[0].cur为头指针</span></span><br><span class="line"><span class="comment">// "0"表示空指针</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;MAXSIZE<span class="number">-1</span>; i++)&#123;</span><br><span class="line">space[i].cur = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">space[MAXSIZE<span class="number">-1</span>].cur = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Malloc_SL</span><span class="params">(SLinkList &amp;space)</span></span>&#123;</span><br><span class="line"><span class="comment">// 若备用空间链表非空，则返回分配的结点下标，否则返回0</span></span><br><span class="line"><span class="keyword">int</span> i = space[<span class="number">0</span>].cur;</span><br><span class="line"><span class="keyword">if</span> (space[<span class="number">0</span>].cur) space[<span class="number">0</span>].cur = space[i].cur;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Free_SL</span><span class="params">(SLinkList &amp;space, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="comment">// 将下标为k的空闲结点回收到备用链接</span></span><br><span class="line">space[k].cur = space[<span class="number">0</span>].cur;</span><br><span class="line">space[<span class="number">0</span>].cur = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">difference</span><span class="params">(SLinkList &amp;space, <span class="keyword">int</span> &amp;S)</span></span>&#123;</span><br><span class="line"><span class="comment">// 依次输入集合A和B的元素，在一维数组space中建立表示集合(A-B)U(B-A)</span></span><br><span class="line"><span class="comment">// 的静态链表，S为其头指针。假设备用空间足够大，space[0].cur为其头指针。</span></span><br><span class="line">InitSpace_SL(space); <span class="comment">//初始化备用空间</span></span><br><span class="line">S = Malloc_SL(space); <span class="comment">//生成S头结点</span></span><br><span class="line">r = S; <span class="comment">//r指向S的当前最后结点</span></span><br><span class="line"><span class="built_in">scanf</span>(m,n); <span class="comment">//输入A和B的元素个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++)&#123; <span class="comment">//建立集合A的链表</span></span><br><span class="line"><span class="keyword">int</span> i = Malloc_SL(space);</span><br><span class="line"><span class="built_in">scanf</span>(space[i].data); <span class="comment">//输入A的元素值</span></span><br><span class="line">space[r].cur = i; <span class="comment">//插入到表尾</span></span><br><span class="line">r = i;</span><br><span class="line">&#125;</span><br><span class="line">space[r].cur = <span class="number">0</span>; <span class="comment">//尾结点指针为空</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(b);</span><br><span class="line">p = S;</span><br><span class="line">k = space[S].cur; <span class="comment">//k指向集合A中第一个结点</span></span><br><span class="line"><span class="keyword">while</span>(k!=space[r].cur &amp;&amp; space[k].data!=b)&#123;</span><br><span class="line">p = k;</span><br><span class="line">k = space[k].cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k == space[r].cur)&#123; <span class="comment">//说明当前表中不存在该元素，插入在r所指结点之后，且r的位置不变</span></span><br><span class="line">i = Malloc_SL(space);</span><br><span class="line">space[i].data = b;</span><br><span class="line">space[i].cur = space[r].cur;</span><br><span class="line">space[r].cur = i;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">//该元素已在表中，删除之</span></span><br><span class="line">space[p].cur = space[k].cur;</span><br><span class="line">Free_SL(space, k);</span><br><span class="line"><span class="keyword">if</span> (r==k) r=p; <span class="comment">// 若删除的是r所指结点，则需修改尾指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************循环链表**************/</span></span><br><span class="line"><span class="comment">// 表中最后一个结点的指针域指向头结点，形成一个环</span></span><br><span class="line"><span class="comment">// 操作与线性列表基本一致，差别仅在于算法中的循环条件不是p或者p-&gt;next是否为空，而是在于是否等于头指针。</span></span><br></pre></td></tr></table></figure><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**************双向链表**************/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> *<span class="title">prior</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DulNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; DuLNode, *DuLinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="function">Status <span class="title">ListInsert_DuL</span><span class="params">(DuLinkList &amp;L, <span class="keyword">int</span> i, ElemType e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(p = GetElemP_DuL(L,i)))&#123;</span><br><span class="line"><span class="keyword">return</span> ERROR; <span class="comment">//若p为NULL，说明插入位置不合法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!(s = (DuLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode)))) <span class="keyword">return</span> ERROR;</span><br><span class="line">s-&gt;data = e;</span><br><span class="line">s-&gt;prior = p-&gt;prior; <span class="comment">//s-&gt;prior = a;</span></span><br><span class="line">p-&gt;prior-&gt;next = s; <span class="comment">//p36页 看图理解 a-&gt;next = s;</span></span><br><span class="line">s-&gt;next = p;</span><br><span class="line">p-&gt;prior = s;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function">Status <span class="title">ListDelete_DuL</span><span class="params">(DuLinkList &amp;L, <span class="keyword">int</span> i, ElemType &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!(p = GetElemP_DuL(L,i))) <span class="keyword">return</span> ERROR; <span class="comment">//在L中确定第i个元素的位置指针p</span></span><br><span class="line">e = p-&gt;data;</span><br><span class="line">p-&gt;prior-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior = p-&gt;prior;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>从实际应用角度出发重新定义线性链表及其基本操作。<br><a href="https://blog.csdn.net/u013457167/article/details/78543258" target="_blank" rel="noopener">https://blog.csdn.net/u013457167/article/details/78543258</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h1&gt;&lt;p&gt;线性表是最常用且最简单的一种数据结构。在稍复杂的线性表中，一个数据元素可以由若干个数据项组成。在这种情况下，常把数据元素称为记录，含
      
    
    </summary>
    
    
      <category term="考研" scheme="https://github.com/DesmonDay/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow运作方式入门</title>
    <link href="https://github.com/DesmonDay/2018/06/07/Tensorflow%E8%BF%90%E4%BD%9C%E6%96%B9%E5%BC%8F%E5%85%A5%E9%97%A8/"/>
    <id>https://github.com/DesmonDay/2018/06/07/Tensorflow运作方式入门/</id>
    <published>2018-06-07T10:41:34.000Z</published>
    <updated>2018-06-07T13:35:23.071Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习mnist-py–-构建图表"><a href="#学习mnist-py–-构建图表" class="headerlink" title="学习mnist.py– 构建图表"></a>学习mnist.py– 构建图表</h1><p>跟着教程步骤将代码打一遍，这样更容易记住。</p><p>Builds the MNIST network.<br>Implements the inference/loss/training pattern for model building.</p><ol><li>inference() – Builds the model as far as required for running the network<br>forward to make predictions.</li><li>loss() – Adds to the inference model the layers required to generate loss.</li><li>training() – Adds to the loss model the Ops required to generate and<br>apply gradients.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">NUM_CLASSES = <span class="number">10</span></span><br><span class="line">IMAGE_SIZE = <span class="number">28</span></span><br><span class="line">IMAGE_PIXELS = IMAGE_SIZE * IMAGE_SIZE</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inference</span><span class="params">(images, hidden1_units, hidden2_units)</span>:</span></span><br><span class="line">    <span class="comment"># inference()函数会尽可能地构建图表，做到返回包含了预测结果（output prediction）的Tensor。</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        images: Images placeholder, from inputs().</span></span><br><span class="line"><span class="string">        hidden1_units: Size of the first hidden layer.</span></span><br><span class="line"><span class="string">        hidden2_units: Size of the second hidden layer.</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        softmax_linear: Output tensor with the computed logits.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># Hidden 1</span></span><br><span class="line">    <span class="comment"># 当这些层是在hidden1作用域下生成时，赋予权重变量的独特名称将会是"hidden1/weights"。</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'hidden1'</span>):</span><br><span class="line">        weights = tf.Variable(</span><br><span class="line">            tf.truncated_normal([IMAGE_PIXELS, hidden1_units],</span><br><span class="line">                                stddev=<span class="number">1.0</span> / math.sqrt(float(IMAGE_PIXELS))),</span><br><span class="line">            name=<span class="string">'weights'</span>) <span class="comment"># truncated_normal(shape, mean, stddev)函数产生正态分布,初始化权重</span></span><br><span class="line">        biases = tf.Variable(tf.zeros([hidden1_units]),</span><br><span class="line">                             name=<span class="string">'biases'</span>)</span><br><span class="line">        hidden1 = tf.nn.relu(tf.matmul(images, weights) + biases)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Hidden 2</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'hidden2'</span>):</span><br><span class="line">        weights = tf.Variable(</span><br><span class="line">            tf.truncated_normal([hidden1_units, hidden2_units],</span><br><span class="line">                            stddev=<span class="number">1.0</span> / math.sqrt(float(hidden1_units))),</span><br><span class="line">            name=<span class="string">'weights'</span>)</span><br><span class="line">        biases = tf.Variable(tf.zeros([hidden2_units]),</span><br><span class="line">                             name=<span class="string">'biases'</span>)</span><br><span class="line">        hidden2 = tf.nn.relu(tf.matmul(hidden1, weights) + biases)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Linear</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'softmax_linear'</span>):</span><br><span class="line">        weights = tf.Variable(</span><br><span class="line">            tf.truncated_normal([hidden2_units, NUM_CLASSES],</span><br><span class="line">                                stddev=<span class="number">1.0</span>/math.sqrt(float(hidden2_units))),</span><br><span class="line">            name = <span class="string">'weights'</span>)</span><br><span class="line">        biases = tf.Variable(tf.zeros([NUM_CLASSES]),</span><br><span class="line">                             name=<span class="string">'biases'</span>)</span><br><span class="line">        logits = tf.matmul(hidden2, weights) + biases</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> logits <span class="comment"># 返回包含了输出结果的logits Tensor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(logits, labels)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Calculates the loss from the logits and the labels.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        logits: Logits tensor, float - [batch_size, NUM_CLASSES].</span></span><br><span class="line"><span class="string">        labels: Labels tensor, int32 - [batch_size].</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        loss: Loss tensor of type float</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    labels = tf.to_int64(labels)</span><br><span class="line">    <span class="keyword">return</span> tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">training</span><span class="params">(loss, learning_rate)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Sets up the training Ops.</span></span><br><span class="line"><span class="string">    Creates a summarizer to track the loss over time in TensorBoard.</span></span><br><span class="line"><span class="string">    Creates an optimizer and applies the gradients to all trainable variables.</span></span><br><span class="line"><span class="string">    The Op returned by this function is what must be passed to the `sess.run()` call to cause the model to train.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        loss: Loss tensor, from loss().</span></span><br><span class="line"><span class="string">        learning_rate: The learning rate to use for gradient descent.</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        train_op: The Op for training.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 该函数从loss()函数中获取损失Tensor，将其交给tf.scalar_summary，后者在与</span></span><br><span class="line">    <span class="comment"># SummaryWriter（见下文）配合使用时，可以向事件文件（events file）中生成汇总值（summary values）</span></span><br><span class="line">    tf.summary.scalar(<span class="string">'loss'</span>, loss) </span><br><span class="line">    <span class="comment"># 应用梯度下降法</span></span><br><span class="line">    Optimizer = tf.train.GradientDescentOptimizer(learning_rate)</span><br><span class="line">    <span class="comment"># 生成一个变量用于保存全局训练步骤（global training step）的数值</span></span><br><span class="line">    <span class="comment"># 使用minimize()函数更新系统中的三角权重（triangle weights), 增加全局步骤的操作</span></span><br><span class="line">    global_step = tf.Variable(<span class="number">0</span>, name=<span class="string">"global_step"</span>, trainable=<span class="keyword">False</span>)</span><br><span class="line">    train_op = optimizer.minimize(loss, global_step=global_step)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train_op <span class="comment"># 返回包含了训练操作（training op）输出结果的Tensor</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluation</span><span class="params">(logits, labels)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Evaluate the quality of the logits at predicting the label.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        logits: Logits tensor, float - [batch_size, NUM_CLASSES].</span></span><br><span class="line"><span class="string">        labels: Labels tensor, int32 - [batch_size], with values in the</span></span><br><span class="line"><span class="string">        range [0, NUM_CLASSES).</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        A scalar int32 tensor with the number of examples (out of batch_size)</span></span><br><span class="line"><span class="string">        that were predicted correctly.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    correct = tf.nn.in_top_k(logis, labels, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># Return the number of true entries.</span></span><br><span class="line">    <span class="keyword">return</span> tf.reduce_sum(tf.cast(correct, tf.int32))</span><br></pre></td></tr></table></figure><h1 id="学习fully-connected-feed-py–-训练模型"><a href="#学习fully-connected-feed-py–-训练模型" class="headerlink" title="学习fully_connected_feed.py– 训练模型"></a>学习fully_connected_feed.py– 训练模型</h1><p>上一节的mnist.py起到构建图表的作用。一旦图表构建完毕，就通过fully_connected_feed.py文件中的用户代码进行循环地迭代式训练和评估。</p><p>Trains and Evaluates the MNIST network using a feed dictionary.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> input_data <span class="comment"># 生成数据集</span></span><br><span class="line"><span class="keyword">import</span> mnist</span><br><span class="line"></span><br><span class="line">FLAGS = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># placeholder_inputs()函数将生成两个tf.placeholder操作，定义传入图表中的shape参数，shape参数中包括batch_size值，后续还会将实际的训练用例传入图表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在训练循环（training loop）的后续步骤中，传入的整个图像和标签数据集会被切片，以符合每一个操作所设置的batch_size值，占位符操作将会填补以符合这个batch_size值。然后使用feed_dict参数，将数据传入sess.run()函数。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">placeholder_inputs</span><span class="params">(batch_size)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Generate placeholder variables to represent the input tensors.</span></span><br><span class="line"><span class="string">    These placeholders are used as inputs by the rest of the model building</span></span><br><span class="line"><span class="string">  code and will be fed from the downloaded data in the .run() loop, below.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        batch_size: The batch size will be baked into both placeholders.</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        images_placeholder: Images placeholder.</span></span><br><span class="line"><span class="string">        labels_placeholder: Labels placeholder.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    images_placeholder = tf.placeholder(tf.float32, shape=(batch_size, mnist.IMAGE_PIXELS))</span><br><span class="line">    labels_placeholder = tf.placeholder(tf.int32, shape=(batch_size))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> images_placeholder, labels_placeholder</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill_feed_dict</span><span class="params">(data_set, images_pl, labels_pl)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Fills the feed_dict for training the given step.</span></span><br><span class="line"><span class="string">    A feed_dict takes the form of:</span></span><br><span class="line"><span class="string">        feed_dict = &#123;</span></span><br><span class="line"><span class="string">            &lt;placeholder&gt;: &lt;tensor of values to be passed for placeholder&gt;,</span></span><br><span class="line"><span class="string">            ....</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data_set: The set of images and labels, from input_data.read_data_sets()</span></span><br><span class="line"><span class="string">        images_pl: The images placeholder, from placeholder_inputs().</span></span><br><span class="line"><span class="string">        labels_pl: The labels placeholder, from placeholder_inputs().</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        feed_dict: The feed dictionary mapping from placeholders to values.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 索要下一批次batch_size的图像和标签，与占位符相匹配的Tensor则会包含下一批次的图像和标签。</span></span><br><span class="line">    images_feed, labels_feed = data_set.next_batch(FLAGS.batch_size, FLAGS.fake_data)</span><br><span class="line">    feed_dict = &#123;</span><br><span class="line">        images_pl: images_feed,</span><br><span class="line">        labels_pl: labels_feed,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> feed_dict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_eval</span><span class="params">(sess, eval_correct, images_placeholder, labels_placeholder, data_set)</span>:</span></span><br><span class="line">    <span class="comment"># Runs one evaluation against the full epoch of data.</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">    sess: The session in which the model has been trained.</span></span><br><span class="line"><span class="string">    eval_correct: The Tensor that returns the number of correct predictions.</span></span><br><span class="line"><span class="string">    images_placeholder: The images placeholder.</span></span><br><span class="line"><span class="string">    labels_placeholder: The labels placeholder.</span></span><br><span class="line"><span class="string">    data_set: The set of images and labels to evaluate, from</span></span><br><span class="line"><span class="string">      input_data.read_data_sets().</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    true_count = <span class="number">0</span> <span class="comment"># Counts the number of correct predictions.</span></span><br><span class="line">    steps_per_epoch = data_set.num_examples <span class="comment"># FLAGS.batch_size</span></span><br><span class="line">    num_examples = steps_per_epoch * FLAGS.batch_size</span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> range(steps_per_epoch):</span><br><span class="line">        feed_dict = fill_feed_dict(data_set, images_placeholder, labels_placeholder)</span><br><span class="line">        true_count += sess.run(eval_correct, feed_dict=feed_dict)</span><br><span class="line">    precision = float(true_count) / num_examples</span><br><span class="line">    print(<span class="string">'Num examples: %d  Num correct: %d  Precision @ 1: %0.04f'</span> % (num_examples, true_count, precision))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_training</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Train MNIST for a number of steps."""</span></span><br><span class="line">    data_sets = input_data.read_data_sets(FLAGS.input_data_dir, FLAGS.fake_data)</span><br><span class="line">    <span class="keyword">with</span> tf.Graph().as_default(): </span><br><span class="line">    <span class="comment"># 这个命令表明所有已经构建的操作都要与默认的tf.Graph全局实例关联起来。</span></span><br><span class="line">        <span class="comment"># Generate placeholders for the images and labels.</span></span><br><span class="line">        images_placeholder, labels_placeholder = placeholder_inputs(FLAGS.batch_size)</span><br><span class="line">        <span class="comment"># Build a Graph that computes predictions from the inference model.</span></span><br><span class="line">        logits = mnist.inference(images_placeholder, FLAGS.hidden1, FLAGS.hidden2)</span><br><span class="line">        <span class="comment"># Add to the Graph the Ops for loss calculation.</span></span><br><span class="line">        loss = mnist.loss(logits, labels_placeholder)</span><br><span class="line">        <span class="comment"># Add to the Graph the Ops that calculate and apply gradients.</span></span><br><span class="line">        train_op = mnist.training(loss, FLAGS.learning_rate)</span><br><span class="line">        <span class="comment"># Add the Op to compare the logits to the labels during evaluation.</span></span><br><span class="line">        eval_correct = mnist.evaluation(logits, labels_placeholder)</span><br><span class="line">        <span class="comment"># Build the summary Tensor based on the TF collection of Summaries.</span></span><br><span class="line">        summary = tf.summary.merge_all()</span><br><span class="line">        <span class="comment"># Add the variable initializer Op.</span></span><br><span class="line">        init = tf.global_variables_initializer()</span><br><span class="line">        <span class="comment"># Create a saver for writing training checkpoints.</span></span><br><span class="line">        sess = tf.Session()</span><br><span class="line">        <span class="comment"># Instantiate a SummaryWriter to output summaries and the Graph.</span></span><br><span class="line">        summary_writer = tf.summary.FileWriter(FLAGS.log_dir, sess.graph)</span><br><span class="line"></span><br><span class="line">        sess.run(init)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Start training</span></span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> range(FLAGS.max_steps):</span><br><span class="line">            start_time = time.time()</span><br><span class="line">            feed_dict = fill_feed_dict(data_set.train, images_placeholder, labels_placeholder)</span><br><span class="line">            _, loss_value = sess.run([train_op,loss], feed_dict=feed_dict)</span><br><span class="line">            duration = time.time() - start_time</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'Step %d: loss = %.2f (%.3f sec)'</span> % (step, loss_value, duration))</span><br><span class="line">                <span class="comment"># Update the events file.</span></span><br><span class="line">                summary_str = sess.run(summary, feed_dict=feed_dict)</span><br><span class="line">                summary_writer.add_summary(summary_str, step)</span><br><span class="line">                summary_writer.flush()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (step+<span class="number">1</span>)%<span class="number">1000</span>==<span class="number">0</span> <span class="keyword">or</span> (step+<span class="number">1</span>)==FLAGS.max_steps:</span><br><span class="line">                checkpoint_file = os.path.join(FLAGS.log_dir, <span class="string">'model.ckpt'</span>)</span><br><span class="line">                saver.save(ses, checkpoint_file, global_step=step)</span><br><span class="line">                <span class="comment"># saver.restore(sess, FLAGS.train_dir)可重载模型参数，继续训练</span></span><br><span class="line">                <span class="comment"># Evaluate against the training set.</span></span><br><span class="line">                print(<span class="string">'Training Data Eval:'</span>)</span><br><span class="line">                do_eval(sess,</span><br><span class="line">                        eval_correct,</span><br><span class="line">                        images_placeholder,</span><br><span class="line">                        labels_placeholder,</span><br><span class="line">                        data_sets.train)</span><br><span class="line">                print(<span class="string">'Validation Data Eval:'</span>)</span><br><span class="line">                do_eval(sess,</span><br><span class="line">                        eval_correct,</span><br><span class="line">                        images_placeholder,</span><br><span class="line">                        labels_placeholder,</span><br><span class="line">                        data_sets.validation)</span><br><span class="line">                <span class="comment"># Evaluate against the test set.</span></span><br><span class="line">                print(<span class="string">'Test Data Eval:'</span>)</span><br><span class="line">                do_eval(sess,</span><br><span class="line">                        eval_correct,</span><br><span class="line">                        images_placeholder,</span><br><span class="line">                        labels_placeholder,</span><br><span class="line">                        data_sets.test)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tf.gfile.Exists(FLAGS.log_dir):</span><br><span class="line">        tf.gfile.DeleteRecursively(FLAGS.log_dir)</span><br><span class="line">    tf.gfile.MakeDirs(FLAGS.log_dir)</span><br><span class="line">    run_training()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    parser = argparse.ArgumentParser() <span class="comment">#参数设置</span></span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'--learning_rate'</span>,</span><br><span class="line">        type=float,</span><br><span class="line">        default=<span class="number">0.01</span>,</span><br><span class="line">        help=<span class="string">'Initial learning_rate'</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'--max_steps'</span>,</span><br><span class="line">         type=int,</span><br><span class="line">        default=<span class="number">200</span>,</span><br><span class="line">        help=<span class="string">'Number of steps to run trainer.'</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'--hidden1'</span>,</span><br><span class="line">        type=int,</span><br><span class="line">        default=<span class="number">128</span>,</span><br><span class="line">        help=<span class="string">'Number of units in hidden layer 1.'</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'--hidden2'</span>,</span><br><span class="line">        type=int,</span><br><span class="line">        default=<span class="number">32</span>,</span><br><span class="line">        help=<span class="string">'Number of units in hidden layer 2.'</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'--batch_size'</span>,</span><br><span class="line">        type=int,</span><br><span class="line">        default=<span class="number">100</span>,</span><br><span class="line">        help=<span class="string">'Batch size.  Must divide evenly into the dataset sizes.'</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'--input_data_dir'</span>,</span><br><span class="line">        type=str,</span><br><span class="line">        default=os.path.join(os.getenv(<span class="string">'TEST_TMPDIR'</span>, <span class="string">'/tmp'</span>),</span><br><span class="line">                           <span class="string">'tensorflow/mnist/input_data'</span>),</span><br><span class="line">        help=<span class="string">'Directory to put the input data.'</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">'--fake_data'</span>,</span><br><span class="line">        default=<span class="keyword">False</span>,</span><br><span class="line">        help=<span class="string">'If true, uses fake data for unit testing.'</span>,</span><br><span class="line">        action=<span class="string">'store_true'</span>)</span><br><span class="line">    FLAGS, unparsed = parser.parse_known_args()</span><br><span class="line">    tf.app.run(main=main, argv=[sys.argv[<span class="number">0</span>]] + unparsed)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;学习mnist-py–-构建图表&quot;&gt;&lt;a href=&quot;#学习mnist-py–-构建图表&quot; class=&quot;headerlink&quot; title=&quot;学习mnist.py– 构建图表&quot;&gt;&lt;/a&gt;学习mnist.py– 构建图表&lt;/h1&gt;&lt;p&gt;跟着教程步骤将代码打一遍，这
      
    
    </summary>
    
      <category term="Tensorflow" scheme="https://github.com/DesmonDay/categories/Tensorflow/"/>
    
    
      <category term="python" scheme="https://github.com/DesmonDay/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Tensorflow_识别手写数字</title>
    <link href="https://github.com/DesmonDay/2018/06/05/Tensorflow-%E8%AF%86%E5%88%AB%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97/"/>
    <id>https://github.com/DesmonDay/2018/06/05/Tensorflow-识别手写数字/</id>
    <published>2018-06-04T16:28:07.000Z</published>
    <updated>2018-06-04T16:28:07.116Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
