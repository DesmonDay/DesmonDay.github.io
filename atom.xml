<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DesmonDay&#39;s Blog</title>
  
  <subtitle>一只小辣鸡的自我拯救之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/DesmonDay/"/>
  <updated>2019-02-18T15:11:08.681Z</updated>
  <id>https://github.com/DesmonDay/</id>
  
  <author>
    <name>Desmon Day</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用openGL实现吃豆人游戏</title>
    <link href="https://github.com/DesmonDay/2019/02/18/%E4%BD%BF%E7%94%A8openGL%E5%AE%9E%E7%8E%B0%E5%90%83%E8%B1%86%E4%BA%BA%E6%B8%B8%E6%88%8F/"/>
    <id>https://github.com/DesmonDay/2019/02/18/使用openGL实现吃豆人游戏/</id>
    <published>2019-02-18T09:09:28.000Z</published>
    <updated>2019-02-18T15:11:08.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h1><p>这个小项目是参考实验楼的免费项目来做的，因此整个博客基本与其相同。有兴趣的同学可以直接在其官网查找学习即可。我的实验环境也主要用自己的虚拟机来完成，这样也便于保存实验进度。仅为个人学习，绝无抄袭的意思。<a href="https://www.shiyanlou.com/courses/running" target="_blank" rel="noopener">https://www.shiyanlou.com/courses/running</a></p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>本节实验主要通过 C++ 和 openGL 库来实现了一个吃豆人的小游戏。主要的课程内容涉及到 C++ 相关的序列容器 vector 、deque 和迭代器，以及 openGL 相关的窗口初始化与绘图功能。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li>C++编程基础</li><li>C++模板库使用</li><li>openGL库使用</li></ol><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ol><li>虚拟机配置ubuntu 16.04</li><li>openGL库</li></ol><h2 id="代码获取"><a href="#代码获取" class="headerlink" title="代码获取"></a>代码获取</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下载源代码</span></span><br><span class="line">wget http:<span class="comment">//labfile.oss.aliyuncs.com/courses/1182/Pacman.zip</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解压源代码</span></span><br><span class="line">unzip -q Pacman.zip</span><br></pre></td></tr></table></figure><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="安装openGL库"><a href="#安装openGL库" class="headerlink" title="安装openGL库"></a>安装openGL库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential </span><br><span class="line">sudo apt-get install libgl1-mesa-dev</span><br><span class="line">sudo apt-get install libglu1-mesa-dev </span><br><span class="line">sudo apt-get install freeglut3-dev</span><br></pre></td></tr></table></figure><h2 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h2><p>进入/Pacman/src/目录，make一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></p><h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><p>需要进入/Pacman/bin/目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./Pacman</span><br></pre></td></tr></table></figure></p><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="https://upload-images.jianshu.io/upload_images/8636110-7c59658afc2459a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/8636110-eac57ea9dcd4dfd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h1><h2 id="模块拆分"><a href="#模块拆分" class="headerlink" title="模块拆分"></a>模块拆分</h2><p>在开始编写程序之前我们需要利用 C++ 的思想把实际问题转换成一个个对象。说到游戏应该就能想到角色、地图和怪物以及操作命令等。我们把这些元素细化就可以得到游戏设计模块：</p><ol><li>角色设计</li><li>地图设计</li><li>怪物设计</li><li>食物设计</li><li>操作设计</li><li>界面设计</li></ol><h2 id="开发说明"><a href="#开发说明" class="headerlink" title="开发说明"></a>开发说明</h2><ol><li>编程语言：C++</li><li>开发环境：Linux ubuntu 16.04</li><li>第三方库：openGL</li></ol><p>备注：openGL 是一种图形界面处理库,提供了许多 API 给其他语言调用。我们的地图、角色和界面等等都需要调用它。</p><h1 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h1><h2 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h2><p>在这里首先需要为我们的项目创建一个文件夹，进入 /home/shiyanlou/Code/ 目录下，将我们这次的项目命名为 Pacman。进入这个文件夹创建三个子文件夹 inlcude(存放头文件)、src(存放源代码)和 bin(存放可执行文件)。并创建相应的代码文件，具体内容与结构如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/8636110-a37866fb4210dc4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/8636110-2cfc62a9df96980f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="预定义与全局变量"><a href="#预定义与全局变量" class="headerlink" title="预定义与全局变量"></a>预定义与全局变量</h2><p>首先在include文件夹中创建main.h，用来存放头文件和一些全局变量，全局变量的定义是方便所有的模块访问并反映游戏的状态。全局变量定义后，在主函数中进行赋值，所有模块就都能访问了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MAIN_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MAIN_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _USE_MATH_DEFINES</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">bool</span> replay; <span class="comment">//check whether start the game</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">bool</span> over;   <span class="comment">//check whether the game is over</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">float</span> squareSize; <span class="comment">// the size of a square</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">float</span> xIncrement; <span class="comment">// the coordinate of x</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">float</span> yIncrement; <span class="comment">// the coordinate of y</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> rotation;     <span class="comment">// direction</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">float</span>* monster1;  <span class="comment">// the coordinate and direction of the 1st monster</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">float</span>* monster2;  <span class="comment">// the coordinate and direction of the 2nd monster</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">float</span>* monster3;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">float</span>* monster4;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; border; <span class="comment">// the coordinate of wall</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 障碍物坐标 (为了清晰分为三部分)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obstaclesTop;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obstaclesMiddle;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obstaclesBottom;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">deque</span>&lt;<span class="keyword">float</span>&gt; food;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; bitmap; <span class="comment">//2d图像，可移动区域</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">bool</span>* keyStates; <span class="comment">// 按键状态</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> points;      <span class="comment">// 得分</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="主函数与窗口"><a href="#主函数与窗口" class="headerlink" title="主函数与窗口"></a>主函数与窗口</h2><p>在主函数中对全局变量进行赋值，然后初始化一个窗口。在这里将使用到openGL 的初始化接口。具体包括：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glutInit</span><span class="params">(<span class="keyword">int</span>* argc,<span class="keyword">char</span>** argv)</span></span>; <span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glutInitDisplayMode</span><span class="params">(unsighed <span class="keyword">int</span> mode)</span></span>; <span class="comment">//定义显示方式 mode：是一个 GLUT 库里预定义的可能的布尔组合，使用mode去指定颜色模式，数量和缓冲区类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glutInitWindowSize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>; <span class="comment">//设置窗口大小 width：窗口宽度 height：窗口高度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glutInitWindowPosition</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>; <span class="comment">//确定窗口位置(默认左上角)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">glutCreateWindow</span><span class="params">(<span class="keyword">char</span>* title)</span></span>; <span class="comment">//设置窗口的标题,title:标题内容</span></span><br><span class="line"></span><br><span class="line">void glutDisplayFunc(void(*func) (void)); //注册当前窗口的显示回调函数,void (*func)(void)：回调函数名称，在这里我们用的是 display</span><br><span class="line"></span><br><span class="line">void glutReshapeFunc(void(*func)(int width, int height)); // 重新设置窗口,void(*func)(int width,int height):回调函数名称,在这里我们用的是 reshape</span><br><span class="line"></span><br><span class="line">void glutIdleFunc(void(*func)(void)); //调用渲染函数,void(*func)(int width,int height):回调函数名称,在这里我们用的是 reshape</span><br><span class="line"></span><br><span class="line">void glutKeyboardFunc(void(*func)(unsigned char key, int x, int y)); //处理按键事件</span><br><span class="line"></span><br><span class="line">void glutKeyboardUpFunc(void(*func)(unsigned char key, int x, int y)); //处理松开按键事件</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glutMainLoop</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">//循环执行</span></span><br></pre></td></tr></table></figure></p><p>将下面的代码写入 Code/Pacman/src/Pacman.cpp 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Pacman.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"control.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"food.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gameresult.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gameover.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gamestart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"init.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"monster.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"createpacman.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"laberynth.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> replay = <span class="literal">false</span>; <span class="comment">//检查是否启动游戏</span></span><br><span class="line"><span class="keyword">bool</span> over = <span class="literal">true</span>;    <span class="comment">//检查游戏是否结束</span></span><br><span class="line"><span class="keyword">float</span> SquareSize = <span class="number">50.0</span>; <span class="comment">//一个单元大小</span></span><br><span class="line"><span class="keyword">float</span> xIncrement = <span class="number">0</span>;  <span class="comment">// the coordinate of x</span></span><br><span class="line"><span class="keyword">float</span> yIncrement = <span class="number">0</span>;  <span class="comment">// the coordinate of y</span></span><br><span class="line"><span class="keyword">int</span> rotation = <span class="number">0</span>;    <span class="comment">// direction</span></span><br><span class="line"><span class="keyword">float</span>* monster1 = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>] &#123;<span class="number">10.5</span>, <span class="number">8.5</span>, <span class="number">1.0</span>&#125;;     <span class="comment">//第一个怪物的坐标和方向</span></span><br><span class="line"><span class="keyword">float</span>* monster2 = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>] &#123;<span class="number">13.5</span>, <span class="number">1.5</span>, <span class="number">2.0</span>&#125;;     <span class="comment">//第二个怪物的坐标和方向</span></span><br><span class="line"><span class="keyword">float</span>* monster3 = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>] &#123;<span class="number">4.5</span>, <span class="number">6.5</span>, <span class="number">3.0</span>&#125;;     <span class="comment">//第三个怪物的坐标和方向</span></span><br><span class="line"><span class="keyword">float</span>* monster4 = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>] &#123;<span class="number">2.5</span>, <span class="number">13.5</span>, <span class="number">4.0</span>&#125;;     <span class="comment">//第四个怪物的坐标和方向</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; border = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span> &#125;; <span class="comment">//墙坐标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//障碍物坐标 (为了清晰分为三个)</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obstaclesTop = &#123; <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obstaclesMiddle = &#123; <span class="number">2</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">9</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; obstaclesBottom = &#123; <span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">float</span>&gt; food = &#123; <span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">1.5</span>, <span class="number">3.5</span>, <span class="number">1.5</span>, <span class="number">4.5</span>, <span class="number">1.5</span>, <span class="number">5.5</span>, <span class="number">1.5</span>, <span class="number">6.5</span>, <span class="number">1.5</span>, <span class="number">7.5</span>, <span class="number">1.5</span>, <span class="number">8.5</span>, <span class="number">1.5</span>, <span class="number">9.5</span>, <span class="number">1.5</span>, <span class="number">10.5</span>, <span class="number">1.5</span>, <span class="number">11.5</span>, <span class="number">1.5</span>, <span class="number">12.5</span>, <span class="number">1.5</span>, <span class="number">13.5</span>, <span class="number">2.5</span>, <span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">6.5</span>, <span class="number">2.5</span>, <span class="number">9.5</span>, <span class="number">2.5</span>, <span class="number">13.5</span>, <span class="number">3.5</span>, <span class="number">1.5</span>, <span class="number">3.5</span>, <span class="number">2.5</span>, <span class="number">3.5</span>, <span class="number">3.5</span>, <span class="number">3.5</span>, <span class="number">4.5</span>, <span class="number">3.5</span>, <span class="number">6.5</span>, <span class="number">3.5</span>, <span class="number">8.5</span>, <span class="number">3.5</span>, <span class="number">9.5</span>, <span class="number">3.5</span>, <span class="number">10.5</span>, <span class="number">3.5</span>, <span class="number">11.5</span>, <span class="number">3.5</span>, <span class="number">13.5</span>, <span class="number">4.5</span>, <span class="number">1.5</span>, <span class="number">4.5</span>, <span class="number">4.5</span>, <span class="number">4.5</span>, <span class="number">5.5</span>, <span class="number">4.5</span>, <span class="number">6.5</span>, <span class="number">4.5</span>, <span class="number">7.5</span>, <span class="number">4.5</span>, <span class="number">8.5</span>, <span class="number">4.5</span>, <span class="number">11.5</span>, <span class="number">4.5</span>, <span class="number">12.5</span>, <span class="number">4.5</span>, <span class="number">13.5</span>, <span class="number">5.5</span>, <span class="number">1.5</span>, <span class="number">5.5</span>, <span class="number">2.5</span>, <span class="number">5.5</span>, <span class="number">5.5</span>, <span class="number">5.5</span>, <span class="number">10.5</span>, <span class="number">5.5</span>, <span class="number">11.5</span>, <span class="number">5.5</span>, <span class="number">13.5</span>, <span class="number">6.5</span>, <span class="number">2.5</span>, <span class="number">6.5</span>, <span class="number">3.5</span>, <span class="number">6.5</span>, <span class="number">4.5</span>, <span class="number">6.5</span>, <span class="number">5.5</span>, <span class="number">6.5</span>, <span class="number">7.5</span>, <span class="number">6.5</span>, <span class="number">10.5</span>, <span class="number">6.5</span>, <span class="number">13.5</span>, <span class="number">7.5</span>, <span class="number">5.5</span>, <span class="number">7.5</span>, <span class="number">6.5</span>, <span class="number">7.5</span>, <span class="number">7.5</span>, <span class="number">7.5</span>, <span class="number">9.5</span>, <span class="number">7.5</span>, <span class="number">10.5</span>, <span class="number">7.5</span>, <span class="number">11.5</span>, <span class="number">7.5</span>, <span class="number">12.5</span>, <span class="number">7.5</span>, <span class="number">13.5</span>, <span class="number">8.5</span>, <span class="number">2.5</span>, <span class="number">8.5</span>, <span class="number">3.5</span>, <span class="number">8.5</span>, <span class="number">4.5</span>, <span class="number">8.5</span>, <span class="number">5.5</span>, <span class="number">8.5</span>, <span class="number">7.5</span>, <span class="number">8.5</span>, <span class="number">10.5</span>, <span class="number">8.5</span>, <span class="number">13.5</span>, <span class="number">9.5</span>, <span class="number">1.5</span>, <span class="number">9.5</span>, <span class="number">2.5</span>, <span class="number">9.5</span>, <span class="number">5.5</span>, <span class="number">9.5</span>, <span class="number">10.5</span>, <span class="number">9.5</span>, <span class="number">11.5</span>, <span class="number">9.5</span>, <span class="number">13.5</span>, <span class="number">10.5</span>, <span class="number">1.5</span>, <span class="number">10.5</span>, <span class="number">4.5</span>, <span class="number">10.5</span>, <span class="number">5.5</span>, <span class="number">10.5</span>, <span class="number">6.5</span>, <span class="number">10.5</span>, <span class="number">7.5</span>, <span class="number">10.5</span>, <span class="number">8.5</span>, <span class="number">10.5</span>, <span class="number">11.5</span>, <span class="number">10.5</span>, <span class="number">12.5</span>, <span class="number">10.5</span>, <span class="number">13.5</span>, <span class="number">11.5</span>, <span class="number">1.5</span>, <span class="number">11.5</span>, <span class="number">2.5</span>, <span class="number">11.5</span>, <span class="number">3.5</span>, <span class="number">11.5</span>, <span class="number">4.5</span>, <span class="number">11.5</span>, <span class="number">5.5</span>, <span class="number">11.5</span>, <span class="number">6.5</span>, <span class="number">11.5</span>, <span class="number">8.5</span>, <span class="number">11.5</span>, <span class="number">9.5</span>, <span class="number">11.5</span>, <span class="number">10.5</span>, <span class="number">11.5</span>, <span class="number">11.5</span>, <span class="number">11.5</span>, <span class="number">13.5</span>, <span class="number">12.5</span>, <span class="number">1.5</span>, <span class="number">12.5</span>, <span class="number">6.5</span>, <span class="number">12.5</span>, <span class="number">9.5</span>, <span class="number">12.5</span>, <span class="number">13.5</span>, <span class="number">13.5</span>, <span class="number">1.5</span>, <span class="number">13.5</span>, <span class="number">2.5</span>, <span class="number">13.5</span>, <span class="number">3.5</span>, <span class="number">13.5</span>, <span class="number">4.5</span>, <span class="number">13.5</span>, <span class="number">5.5</span>, <span class="number">13.5</span>, <span class="number">6.5</span>, <span class="number">13.5</span>, <span class="number">7.5</span>, <span class="number">13.5</span>, <span class="number">8.5</span>, <span class="number">13.5</span>, <span class="number">9.5</span>, <span class="number">13.5</span>, <span class="number">10.5</span>, <span class="number">13.5</span>, <span class="number">11.5</span>, <span class="number">13.5</span>, <span class="number">12.5</span>, <span class="number">13.5</span>, <span class="number">13.5</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; bitmap;         <span class="comment">// 2d图像，可移动区域</span></span><br><span class="line"><span class="keyword">bool</span>* keyStates = <span class="keyword">new</span> <span class="keyword">bool</span>[<span class="number">256</span>];     <span class="comment">// 按键记录</span></span><br><span class="line"><span class="keyword">int</span> points = <span class="number">0</span>;                     <span class="comment">// 得分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化并创建屏幕</span></span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutDisplayMode(GLUT_DOUBLE | GLUT_RGB);<span class="comment">//显示方式(双缓冲区，颜色索引方式)  </span></span><br><span class="line">    glutInitWindowSize(<span class="number">750</span>,<span class="number">750</span>);</span><br><span class="line">    glutInitWindowPosition(<span class="number">500</span>,<span class="number">50</span>);<span class="comment">//窗口起始位置</span></span><br><span class="line">    glutCreateWindow(<span class="string">"Pacman - by Desmon"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义所有控制功能</span></span><br><span class="line">    glutDisplayFunc(display);<span class="comment">//显示窗口</span></span><br><span class="line">    glutReshapeFunc(reshape); <span class="comment">//重置窗口</span></span><br><span class="line">    glutIdleFunc(display); <span class="comment">//loop</span></span><br><span class="line">    glutKeyboardFunc(keyPressed);</span><br><span class="line">    glutKeyboardUpFunc(keyUp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行游戏</span></span><br><span class="line">    init();</span><br><span class="line">    glutMainLoop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="初始化地图"><a href="#初始化地图" class="headerlink" title="初始化地图"></a>初始化地图</h2><p>设计了开始界面后，下面就是进入游戏，首先就是显示地图，在这里我们用障碍物填充地图，这样没有障碍物的地方就可以通行了，形成了一个迷宫。</p><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p>将下面的代码写入 Code/Pacman/include/init.h 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* #ifndef 指示检测指定的预处理器变量是否未定义，</span></span><br><span class="line"><span class="comment">如果未定义，那么跟在后面的所有指示被处理，直到出现#endif；</span></span><br><span class="line"><span class="comment">如果已定义，那么#ifndef测试为假，该指示和#endif指示间的代码都被忽略。*/</span></span><br><span class="line"><span class="comment">//init.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _INIT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _INIT_H_</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>OpenGL颜色相关的方法见此博客：<a href="https://blog.csdn.net/hebbely/article/details/69951068。" target="_blank" rel="noopener">https://blog.csdn.net/hebbely/article/details/69951068。</a></p><p>将下面的代码写入 Code/Pacman/src/init.cpp 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//init.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"init.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"><span class="comment">//初始化游戏</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//清除屏幕</span></span><br><span class="line">    glClearColor(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    glShadeModel(GL_FLAT);<span class="comment">//着色</span></span><br><span class="line">    <span class="comment">//重置按键</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</span><br><span class="line">        keyStates[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用障碍物填充地图</span></span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span> &#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span> &#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span> &#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>&#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>&#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>&#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>&#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>&#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span> &#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span> &#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span> &#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span> &#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span> &#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span> &#125;);</span><br><span class="line">    bitmap.push_back(&#123; <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="迷宫"><a href="#迷宫" class="headerlink" title="迷宫"></a>迷宫</h2><p>上面我们已经对地图进行了初始化，也对障碍物进行了初始化，接下来就需要使用 openGL 来绘图了。这里涉及到的接口包括：</p><p>void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 ); 绘画矩形 x1:矩形左上角横坐标 y1:矩形左上角纵坐标 x2:矩形右下角横坐标 y2:矩形右下角纵坐标</p><h3 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h3><p>将下面的代码写入 /Code/Pacman/include/laberynth.h 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//laberynth.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LABERYTH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _LABERYTH_H</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLaberynth</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><p>将下面的代码写入 Code/Pacman/src/laberynth.cpp 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//laberynth.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"laberynth.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"><span class="comment">//障碍物与墙体的绘制方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawLaberynth</span><span class="params">()</span></span>&#123;</span><br><span class="line">    glColor3f(<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>); <span class="comment">//设置绘图颜色-白色</span></span><br><span class="line">    <span class="comment">//边界</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type i = <span class="number">0</span>; i &lt; border.size(); i = i + <span class="number">4</span>)&#123;</span><br><span class="line">        glRectf(border.at(i) * squareSize, border.at(i+<span class="number">1</span>) * squareSize, border.at(i+<span class="number">2</span>) * squareSize, border.at(i+<span class="number">3</span>) * squareSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//障碍物，分为上中下三部分绘图</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type j = <span class="number">0</span>; j &lt; obstaclesBottom.size(); j = j + <span class="number">4</span>)&#123;</span><br><span class="line">        glRectf(obstaclesBottom.at(j) * squareSize, obstaclesBottom.at(j + <span class="number">1</span>)*squareSize, obstaclesBottom.at(j + <span class="number">2</span>)*squareSize, obstaclesBottom.at(j + <span class="number">3</span>)*squareSize);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type k = <span class="number">0</span>; k &lt; obstaclesMiddle.size(); k = k + <span class="number">4</span>)&#123;</span><br><span class="line">        glRectf(obstaclesMiddle.at(k) * squareSize, obstaclesMiddle.at(k + <span class="number">1</span>)*squareSize, obstaclesMiddle.at(k + <span class="number">2</span>)*squareSize, obstaclesMiddle.at(k + <span class="number">3</span>)*squareSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::size_type p = <span class="number">0</span>; p &lt; obstaclesTop.size(); p = p + <span class="number">4</span>)&#123;</span><br><span class="line">        glRectf(obstaclesTop.at(p) * squareSize, obstaclesTop.at(p + <span class="number">1</span>)*squareSize, obstaclesTop.at(p + <span class="number">2</span>)*squareSize, obstaclesTop.at(p + <span class="number">3</span>)*squareSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//glRectf函数是绘制矩形</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="游戏角色"><a href="#游戏角色" class="headerlink" title="游戏角色"></a>游戏角色</h2><p>在上面已经建立好了地图和迷宫，接下来一步，应该创建一个游戏角色，也就是吃豆人。按照以往的经验，吃豆人可以设计为一个圆形然后拥有一张嘴。需要用到的新接口包括：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glBegin</span><span class="params">(GLenum mode)</span></span>; <span class="comment">//表示绘图方式</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glVertex2f</span><span class="params">(GLfloat x, GLfloat y)</span></span>; <span class="comment">//指定画笔位置</span></span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/8636110-2cca82be3d534413.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h3><p>将下面的代码写入 Code/Pacman/include/createpacman.h 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//createpacman.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CREATEPACMAN_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CREATEPACMAN_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawPacman</span><span class="params">(<span class="keyword">float</span> positionX, <span class="keyword">float</span> positionY, <span class="keyword">float</span> rotation)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><p>将下面的代码写入 Code/Pacman/src/createpacman.cpp 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//createpacman.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"createpacman.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"GL/gl.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawPacman</span><span class="params">(<span class="keyword">float</span> positionX, <span class="keyword">float</span> positionY, <span class="keyword">float</span> rotation)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    glBegin(GL_LINES);<span class="comment">//创建一条线</span></span><br><span class="line">    glColor3f(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>); <span class="comment">//黄色</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">32</span>; k++)&#123;</span><br><span class="line">        x = (<span class="keyword">float</span>)k / <span class="number">2.0</span> * <span class="built_in">cos</span>((<span class="number">30</span> + <span class="number">90</span>*rotation) * M_PI / <span class="number">180.0</span>) + (positionX*squareSize);</span><br><span class="line">        y = (<span class="keyword">float</span>)k / <span class="number">2.0</span>* <span class="built_in">sin</span>((<span class="number">30</span> + <span class="number">90</span> * rotation) * M_PI / <span class="number">180.0</span>) + (positionY*squareSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &lt; <span class="number">330</span>; i++)&#123;</span><br><span class="line">            glVertex2f(x, y);</span><br><span class="line">            x = (<span class="keyword">float</span>)k / <span class="number">2.0</span> * <span class="built_in">cos</span>((i + <span class="number">90</span> * rotation) * M_PI / <span class="number">180.0</span>) + (positionX*squareSize);</span><br><span class="line">            y = (<span class="keyword">float</span>)k / <span class="number">2.0</span>* <span class="built_in">sin</span>((i + <span class="number">90</span> * rotation) * M_PI / <span class="number">180.0</span>) + (positionY*squareSize);</span><br><span class="line">            glVertex2f(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    glEnd();<span class="comment">//绘图结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="怪物设计"><a href="#怪物设计" class="headerlink" title="怪物设计"></a>怪物设计</h2><p>怪物设计这里我们需要考虑到几点，第一怪物的外形设计、第二怪物的移动设计，第三怪物与障碍物的碰撞检测。</p><p><img src="https://upload-images.jianshu.io/upload_images/8636110-edeeae89a2db89d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="头文件-3"><a href="#头文件-3" class="headerlink" title="头文件"></a>头文件</h3><p>将下面的代码写入 Code/Pacman/include/monster.h 文件中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//monster.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MONSTER_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MONSTER_H_</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawMonster</span><span class="params">(<span class="keyword">float</span> positionX, <span class="keyword">float</span> positionY, <span class="keyword">float</span> r, <span class="keyword">float</span> g, <span class="keyword">float</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateMonster</span><span class="params">(<span class="keyword">float</span>* monster, <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><p>将下面的代码写入 /Code/Pacman/src/monster.cpp 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//monster.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"monster.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"><span class="comment">//绘画怪物</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawMonster</span><span class="params">(<span class="keyword">float</span> positionX, <span class="keyword">float</span> positionY, <span class="keyword">float</span> r, <span class="keyword">float</span> g, <span class="keyword">float</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    glBegin(GL_LINES);</span><br><span class="line">    glColor3f(r, g, b);</span><br><span class="line">    <span class="comment">//头</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;<span class="number">32</span>; k++)&#123;</span><br><span class="line">        x = (<span class="keyword">float</span>)k / <span class="number">2.0</span> * <span class="built_in">cos</span>(<span class="number">360</span> * M_PI / <span class="number">180.0</span>) + (positionX*squareSize);</span><br><span class="line">        y = (<span class="keyword">float</span>)k / <span class="number">2.0</span> * <span class="built_in">sin</span>(<span class="number">360</span> * M_PI / <span class="number">180.0</span>) + (positionY*squareSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">180</span>; i&lt;=<span class="number">360</span>; i++)&#123;</span><br><span class="line">            glVertex2f(x, y);</span><br><span class="line">            x = (<span class="keyword">float</span>)k / <span class="number">2.0</span> * <span class="built_in">cos</span>(i * M_PI / <span class="number">180.0</span>) + (positionX*squareSize);</span><br><span class="line">            y = (<span class="keyword">float</span>)k / <span class="number">2.0</span>* <span class="built_in">sin</span>(i * M_PI / <span class="number">180.0</span>) + (positionY*squareSize);</span><br><span class="line">            glVertex2f(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    glEnd();</span><br><span class="line">    <span class="comment">//身体</span></span><br><span class="line">    glRectf((positionX*squareSize) - <span class="number">17</span>, positionY*squareSize, (positionX*squareSize) + <span class="number">15</span>, (positionY*squareSize) + <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//眼睛和腿</span></span><br><span class="line">    glBegin(GL_POINTS);</span><br><span class="line">    glColor3f(<span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0.4</span>);</span><br><span class="line">    glVertex2f((positionX*squareSize) - <span class="number">11</span>, (positionY*squareSize) + <span class="number">14</span>); <span class="comment">//legs</span></span><br><span class="line">    glVertex2f((positionX*squareSize) - <span class="number">1</span>, (positionY*squareSize) + <span class="number">14</span>); <span class="comment">//legs</span></span><br><span class="line">    glVertex2f((positionX*squareSize) + <span class="number">8</span>, (positionY*squareSize) + <span class="number">14</span>); <span class="comment">//legs</span></span><br><span class="line">    glVertex2f((positionX*squareSize) + <span class="number">4</span>, (positionY*squareSize) - <span class="number">3</span>); <span class="comment">//eyes</span></span><br><span class="line">    glVertex2f((positionX*squareSize) - <span class="number">7</span>, (positionY*squareSize) - <span class="number">3</span>); <span class="comment">//eyes </span></span><br><span class="line">    glEnd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//怪物移动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateMonster</span><span class="params">(<span class="keyword">float</span> *monster, <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 找到当前位置</span></span><br><span class="line">    <span class="keyword">int</span> x1Quadrant = (<span class="keyword">int</span>)((monster[<span class="number">0</span>] - (<span class="number">2</span>/squareSize)) - (<span class="number">16.0</span> *<span class="built_in">cos</span>(<span class="number">360</span> * M_PI / <span class="number">180.0</span>)) / squareSize);</span><br><span class="line">    <span class="keyword">int</span> x2Quadrant = (<span class="keyword">int</span>)((monster[<span class="number">0</span>] + (<span class="number">2</span>/squareSize)) + (<span class="number">16.0</span> *<span class="built_in">cos</span>(<span class="number">360</span> * M_PI / <span class="number">180.0</span>)) / squareSize);</span><br><span class="line">    <span class="keyword">int</span> y1Quadrant = (<span class="keyword">int</span>)((monster[<span class="number">1</span>] - (<span class="number">2</span>/squareSize)) - (<span class="number">16.0</span> *<span class="built_in">cos</span>(<span class="number">360</span> * M_PI / <span class="number">180.0</span>)) / squareSize);</span><br><span class="line">    <span class="keyword">int</span> y2Quadrant = (<span class="keyword">int</span>)((monster[<span class="number">1</span>] + (<span class="number">2</span>/squareSize)) + (<span class="number">16.0</span> *<span class="built_in">cos</span>(<span class="number">360</span> * M_PI / <span class="number">180.0</span>)) / squareSize);</span><br><span class="line">    <span class="comment">//怪物移动和撞墙检测</span></span><br><span class="line">    <span class="keyword">switch</span> ((<span class="keyword">int</span>)monster[<span class="number">2</span>])&#123; <span class="comment">//不同方向</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> (!bitmap.at(x1Quadrant).at((<span class="keyword">int</span>)monster[<span class="number">1</span>]))&#123;</span><br><span class="line">            monster[<span class="number">0</span>] -= <span class="number">2</span>/squareSize;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> current = monster[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                monster[<span class="number">2</span>] = (rand() % <span class="number">4</span>) + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">while</span> (current == (<span class="keyword">int</span>) monster[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span> (!bitmap.at(x2Quadrant).at((<span class="keyword">int</span>)monster[<span class="number">1</span>]))&#123;</span><br><span class="line">            monster[<span class="number">0</span>] += <span class="number">2</span> / squareSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> current = monster[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                monster[<span class="number">2</span>] = (rand() % <span class="number">4</span>) + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">while</span> (current == (<span class="keyword">int</span>)monster[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> (!bitmap.at((<span class="keyword">int</span>)monster[<span class="number">0</span>]).at(y1Quadrant))&#123;</span><br><span class="line">            monster[<span class="number">1</span>] -= <span class="number">2</span> / squareSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> current = monster[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                monster[<span class="number">2</span>] = (rand() % <span class="number">4</span>) + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">while</span> (current == (<span class="keyword">int</span>)monster[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">if</span> (!bitmap.at((<span class="keyword">int</span>)monster[<span class="number">0</span>]).at(y2Quadrant))&#123;</span><br><span class="line">            monster[<span class="number">1</span>] += <span class="number">2</span> / squareSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> current = monster[<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                monster[<span class="number">2</span>] = (rand() % <span class="number">4</span>) + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">while</span> (current == (<span class="keyword">int</span>)monster[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="食物设计"><a href="#食物设计" class="headerlink" title="食物设计"></a>食物设计</h2><p>食物应该设计在可移动区域内，也就是迷宫内，在主函数中我们已经对食物坐标进行了初始化，这里需要进行绘图，另外还需考虑食物被吃的情况。这里用到的新接口包括：</p><p>void glPointSize( GLfloat size);点大小设置</p><h3 id="头文件-4"><a href="#头文件-4" class="headerlink" title="头文件"></a>头文件</h3><p>将下面的代码写入 /Code/Pacman/include/food.h 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//food.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _FOOD_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _FOOD_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">foodEaten</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">float</span> pacmanX, <span class="keyword">float</span> pacmanY)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawFood</span><span class="params">(<span class="keyword">float</span> pacmanX, <span class="keyword">float</span> pacmanY)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//food.cpp</span></span><br><span class="line"><span class="meta">#inclue <span class="meta-string">"food.h"</span></span></span><br><span class="line"><span class="meta">#inclue <span class="meta-string">"main.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//检查食物是否被吃</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">foodEaten</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">float</span> pacmanX, <span class="keyword">float</span> pacmamY)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= pacmanX - <span class="number">16.0</span> *<span class="built_in">cos</span>(<span class="number">359</span> * M_PI / <span class="number">180.0</span>) &amp;&amp; x &lt;= pacmanX + <span class="number">16.0</span>*<span class="built_in">cos</span>(<span class="number">359</span> * M_PI / <span class="number">180.0</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (y &gt;= pacmanY - <span class="number">16.0</span>*<span class="built_in">cos</span>(<span class="number">359</span> * M_PI / <span class="number">180.0</span>) &amp;&amp; y &lt;= pacmanY + <span class="number">16.0</span>*<span class="built_in">cos</span>(<span class="number">359</span> * M_PI / <span class="number">180.0</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//画上食物</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drawFood</span><span class="params">(<span class="keyword">float</span> pacmanX, <span class="keyword">float</span> pacmanY)</span></span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">float</span>&gt; temp;</span><br><span class="line">    <span class="comment">//检查食物是否没有被吃掉</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">deque</span>&lt;<span class="keyword">float</span>&gt;::size_type i = <span class="number">0</span>; i &lt; food.size(); i = i + <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!foodEaten(food.at(i)*squareSize, food.at(i + <span class="number">1</span>)*squareSize, pacmanX, pacmanY))&#123;</span><br><span class="line">            temp.push_back(food.at(i)); <span class="comment">//没有被吃掉</span></span><br><span class="line">            temp.push_back(food.at(i + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            points++; <span class="comment">//食物被吃掉，分数+1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    food.swap(temp);</span><br><span class="line">    glPointSize(<span class="number">5.0</span>);</span><br><span class="line">    glBegin(GL_POINTS);</span><br><span class="line">    glColor3f(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="comment">//画上食物</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">deque</span>&lt;<span class="keyword">float</span>&gt;::size_type j = <span class="number">0</span>; j &lt; food.size(); j = j + <span class="number">2</span>)&#123;</span><br><span class="line">        glVertex2f(food.at(j)*squareSize, food.at(j + <span class="number">1</span>)*squareSize);<span class="comment">//画点</span></span><br><span class="line">    &#125;</span><br><span class="line">    glEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="角色移动命令"><a href="#角色移动命令" class="headerlink" title="角色移动命令"></a>角色移动命令</h2><p>现在已经设计好了迷宫、食物和怪物，接下来就可以做角色的控制设计了，在这里我们只设计了角色的上下左右移动。</p><h3 id="头文件-5"><a href="#头文件-5" class="headerlink" title="头文件"></a>头文件</h3><p>将下面的代码写入 Code/Pacman/include/control.h 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//control.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _CONTROL_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CONTROL_H_</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> key, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyUp</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> key, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resetGame</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyOperations</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h3 id="源代码-5"><a href="#源代码-5" class="headerlink" title="源代码"></a>源代码</h3><p>将下面的代码写入 Code/Pacman/src/control.cpp 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//control.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"control.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"><span class="comment">//设置按键</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> key, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    keyStates[key] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放按键</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyUp</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> key, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    keyStates[key] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置所有元素并开始游戏</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resetGame</span><span class="params">()</span></span>&#123;</span><br><span class="line">    over = <span class="literal">false</span>;</span><br><span class="line">    xIncrement = <span class="number">0</span>;</span><br><span class="line">    yIncrement = <span class="number">0</span>;</span><br><span class="line">    rotation = <span class="number">0</span>;</span><br><span class="line">    monster1 = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>] &#123;<span class="number">10.5</span>, <span class="number">8.5</span>, <span class="number">1.0</span>&#125;;</span><br><span class="line">    monster2 = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>] &#123;<span class="number">13.5</span>, <span class="number">1.5</span>, <span class="number">2.0</span>&#125;;</span><br><span class="line">    monster3 = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>] &#123;<span class="number">4.5</span>, <span class="number">6.5</span>, <span class="number">3.0</span>&#125;;</span><br><span class="line">    monster4 = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">3</span>] &#123;<span class="number">2.5</span>, <span class="number">13.5</span>, <span class="number">4.0</span>&#125;;</span><br><span class="line">    points = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)&#123;</span><br><span class="line">        keyStates[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    food = &#123; <span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">1.5</span>, <span class="number">3.5</span>, <span class="number">1.5</span>, <span class="number">4.5</span>, <span class="number">1.5</span>, <span class="number">5.5</span>, <span class="number">1.5</span>, <span class="number">6.5</span>, <span class="number">1.5</span>, <span class="number">7.5</span>, <span class="number">1.5</span>, <span class="number">8.5</span>, <span class="number">1.5</span>, <span class="number">9.5</span>, <span class="number">1.5</span>, <span class="number">10.5</span>, <span class="number">1.5</span>, <span class="number">11.5</span>, <span class="number">1.5</span>, <span class="number">12.5</span>, <span class="number">1.5</span>, <span class="number">13.5</span>, <span class="number">2.5</span>, <span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">6.5</span>, <span class="number">2.5</span>, <span class="number">9.5</span>, <span class="number">2.5</span>, <span class="number">13.5</span>, <span class="number">3.5</span>, <span class="number">1.5</span>, <span class="number">3.5</span>, <span class="number">2.5</span>, <span class="number">3.5</span>, <span class="number">3.5</span>, <span class="number">3.5</span>, <span class="number">4.5</span>, <span class="number">3.5</span>, <span class="number">6.5</span>, <span class="number">3.5</span>, <span class="number">8.5</span>, <span class="number">3.5</span>, <span class="number">9.5</span>, <span class="number">3.5</span>, <span class="number">10.5</span>, <span class="number">3.5</span>, <span class="number">11.5</span>, <span class="number">3.5</span>, <span class="number">13.5</span>, <span class="number">4.5</span>, <span class="number">1.5</span>, <span class="number">4.5</span>, <span class="number">4.5</span>, <span class="number">4.5</span>, <span class="number">5.5</span>, <span class="number">4.5</span>, <span class="number">6.5</span>, <span class="number">4.5</span>, <span class="number">7.5</span>, <span class="number">4.5</span>, <span class="number">8.5</span>, <span class="number">4.5</span>, <span class="number">11.5</span>, <span class="number">4.5</span>, <span class="number">12.5</span>, <span class="number">4.5</span>, <span class="number">13.5</span>, <span class="number">5.5</span>, <span class="number">1.5</span>, <span class="number">5.5</span>, <span class="number">2.5</span>, <span class="number">5.5</span>, <span class="number">5.5</span>, <span class="number">5.5</span>, <span class="number">10.5</span>, <span class="number">5.5</span>, <span class="number">11.5</span>, <span class="number">5.5</span>, <span class="number">13.5</span>, <span class="number">6.5</span>, <span class="number">2.5</span>, <span class="number">6.5</span>, <span class="number">3.5</span>, <span class="number">6.5</span>, <span class="number">4.5</span>, <span class="number">6.5</span>, <span class="number">5.5</span>, <span class="number">6.5</span>, <span class="number">7.5</span>, <span class="number">6.5</span>, <span class="number">10.5</span>, <span class="number">6.5</span>, <span class="number">13.5</span>, <span class="number">7.5</span>, <span class="number">5.5</span>, <span class="number">7.5</span>, <span class="number">6.5</span>, <span class="number">7.5</span>, <span class="number">7.5</span>, <span class="number">7.5</span>, <span class="number">9.5</span>, <span class="number">7.5</span>, <span class="number">10.5</span>, <span class="number">7.5</span>, <span class="number">11.5</span>, <span class="number">7.5</span>, <span class="number">12.5</span>, <span class="number">7.5</span>, <span class="number">13.5</span>, <span class="number">8.5</span>, <span class="number">2.5</span>, <span class="number">8.5</span>, <span class="number">3.5</span>, <span class="number">8.5</span>, <span class="number">4.5</span>, <span class="number">8.5</span>, <span class="number">5.5</span>, <span class="number">8.5</span>, <span class="number">7.5</span>, <span class="number">8.5</span>, <span class="number">10.5</span>, <span class="number">8.5</span>, <span class="number">13.5</span>, <span class="number">9.5</span>, <span class="number">1.5</span>, <span class="number">9.5</span>, <span class="number">2.5</span>, <span class="number">9.5</span>, <span class="number">5.5</span>, <span class="number">9.5</span>, <span class="number">10.5</span>, <span class="number">9.5</span>, <span class="number">11.5</span>, <span class="number">9.5</span>, <span class="number">13.5</span>, <span class="number">10.5</span>, <span class="number">1.5</span>, <span class="number">10.5</span>, <span class="number">4.5</span>, <span class="number">10.5</span>, <span class="number">5.5</span>, <span class="number">10.5</span>, <span class="number">6.5</span>, <span class="number">10.5</span>, <span class="number">7.5</span>, <span class="number">10.5</span>, <span class="number">8.5</span>, <span class="number">10.5</span>, <span class="number">11.5</span>, <span class="number">10.5</span>, <span class="number">12.5</span>, <span class="number">10.5</span>, <span class="number">13.5</span>, <span class="number">11.5</span>, <span class="number">1.5</span>, <span class="number">11.5</span>, <span class="number">2.5</span>, <span class="number">11.5</span>, <span class="number">3.5</span>, <span class="number">11.5</span>, <span class="number">4.5</span>, <span class="number">11.5</span>, <span class="number">5.5</span>, <span class="number">11.5</span>, <span class="number">6.5</span>, <span class="number">11.5</span>, <span class="number">8.5</span>, <span class="number">11.5</span>, <span class="number">9.5</span>, <span class="number">11.5</span>, <span class="number">10.5</span>, <span class="number">11.5</span>, <span class="number">11.5</span>, <span class="number">11.5</span>, <span class="number">13.5</span>, <span class="number">12.5</span>, <span class="number">1.5</span>, <span class="number">12.5</span>, <span class="number">6.5</span>, <span class="number">12.5</span>, <span class="number">9.5</span>, <span class="number">12.5</span>, <span class="number">13.5</span>, <span class="number">13.5</span>, <span class="number">1.5</span>, <span class="number">13.5</span>, <span class="number">2.5</span>, <span class="number">13.5</span>, <span class="number">3.5</span>, <span class="number">13.5</span>, <span class="number">4.5</span>, <span class="number">13.5</span>, <span class="number">5.5</span>, <span class="number">13.5</span>, <span class="number">6.5</span>, <span class="number">13.5</span>, <span class="number">7.5</span>, <span class="number">13.5</span>, <span class="number">8.5</span>, <span class="number">13.5</span>, <span class="number">9.5</span>, <span class="number">13.5</span>, <span class="number">10.5</span>, <span class="number">13.5</span>, <span class="number">11.5</span>, <span class="number">13.5</span>, <span class="number">12.5</span>, <span class="number">13.5</span>, <span class="number">13.5</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制吃豆人移动</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyOperations</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获得当前位置</span></span><br><span class="line">    <span class="keyword">float</span>  x = (<span class="number">1.5</span> + xIncrement) * squareSize;</span><br><span class="line">    <span class="keyword">float</span> y = (<span class="number">1.5</span> + yIncrement) * squareSize;</span><br><span class="line">    <span class="comment">// 更新按键</span></span><br><span class="line">    <span class="keyword">if</span> (keyStates[<span class="string">'a'</span>])&#123; <span class="comment">//往左</span></span><br><span class="line">        x -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> x1Quadrant = (<span class="keyword">int</span>)((x - <span class="number">16.0</span> *<span class="built_in">cos</span>(<span class="number">360</span> * M_PI / <span class="number">180.0</span>)) / squareSize);</span><br><span class="line">        <span class="keyword">if</span> (!bitmap.at(x1Quadrant).at((<span class="keyword">int</span>)y/squareSize))&#123;</span><br><span class="line">            xIncrement -= <span class="number">2</span> / squareSize;</span><br><span class="line">            rotation = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keyStates[<span class="string">'d'</span>])&#123; <span class="comment">//往右</span></span><br><span class="line">        x += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> x2Quadrant = (<span class="keyword">int</span>)((x + <span class="number">16.0</span> *<span class="built_in">cos</span>(<span class="number">360</span> * M_PI / <span class="number">180.0</span>)) / squareSize);</span><br><span class="line">        <span class="keyword">if</span> (!bitmap.at(x2Quadrant).at((<span class="keyword">int</span>)y / squareSize))&#123;</span><br><span class="line">            xIncrement += <span class="number">2</span> / squareSize;</span><br><span class="line">            rotation = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keyStates[<span class="string">'w'</span>])&#123; <span class="comment">//往上</span></span><br><span class="line">        y -= <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> y1Quadrant = (<span class="keyword">int</span>)((y - <span class="number">16.0</span> *<span class="built_in">cos</span>(<span class="number">360</span> * M_PI / <span class="number">180.0</span>)) / squareSize);</span><br><span class="line">        <span class="keyword">if</span> (!bitmap.at((<span class="keyword">int</span>)x/squareSize).at(y1Quadrant))&#123;</span><br><span class="line">            yIncrement -= <span class="number">2</span> / squareSize;</span><br><span class="line">            rotation = <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keyStates[<span class="string">'s'</span>])&#123; <span class="comment">//往下</span></span><br><span class="line">        y += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> y2Quadrant = (<span class="keyword">int</span>)((y + <span class="number">16.0</span> *<span class="built_in">cos</span>(<span class="number">360</span> * M_PI / <span class="number">180.0</span>)) / squareSize);</span><br><span class="line">        <span class="keyword">if</span> (!bitmap.at((<span class="keyword">int</span>)x / squareSize).at(y2Quadrant))&#123;</span><br><span class="line">            yIncrement += <span class="number">2</span> / squareSize;</span><br><span class="line">            rotation = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keyStates[<span class="string">' '</span>])&#123; <span class="comment">//开始游戏或重新游戏</span></span><br><span class="line">        <span class="keyword">if</span> (!replay &amp;&amp; over)&#123;</span><br><span class="line">            resetGame();</span><br><span class="line">            replay = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (replay &amp;&amp; over)&#123;</span><br><span class="line">            replay = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="开始界面"><a href="#开始界面" class="headerlink" title="开始界面"></a>开始界面</h2><p>接着要准备一个欢迎界面，同时对游戏具体操作方式做一个声明，然后显示游戏元素。这里我们需要用到 openGL 的绘图接口。具体包括：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glClearColor</span><span class="params">(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)</span></span>; <span class="comment">//红、绿、蓝和 alpha 值，指定值范围均为[ 0.0f,1.0f ]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glcolor3f</span><span class="params">(GLfloat red，GLfloat green，GLfloat blue)</span></span>; <span class="comment">//设置画笔颜色</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glRasterPos2f</span><span class="params">( GLfloat x, GLfloat y)</span></span>; <span class="comment">//要显示字体的起始坐标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glutBitmapCharacter</span><span class="params">(<span class="keyword">void</span> *font, <span class="keyword">int</span> character)</span></span>; <span class="comment">//渲染字符 font:字体类型 character:具体字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glutSwapBuffers</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">//刷新</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glMatrixMode</span><span class="params">(GLenum mode)</span></span>; <span class="comment">//投影方式 GLenum mode:投影方式，有3种模式: GL_PROJECTION 投影, GL_MODELVIEW 模型视图, GL_TEXTURE 纹理.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glLoadIdentity</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">//恢复初始坐标系</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glViewport</span><span class="params">(GLint x,GLint y,GLsizei width,GLsizei height)</span></span>; <span class="comment">//定义窗口 x:起始横坐标 y:起始纵坐标 width:宽度 height:高度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glOrtho</span><span class="params">(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top,GLdouble near,GLdouble far)</span></span>; <span class="comment">//设置或修改修剪空间的范围.这个函数的操作是创建一个正射投影矩阵，并且用这个矩阵乘以当前矩阵。其中近裁剪平面是一个矩形，矩形左下角点三维空间坐标是（left，bottom，-near），右上角点是（right，top，-near）；远裁剪平面也是一个矩形，左下角点空间坐标是（left，bottom，-far），右上角点是（right，top，-far）</span></span><br></pre></td></tr></table></figure><h3 id="头文件-6"><a href="#头文件-6" class="headerlink" title="头文件"></a>头文件</h3><p>将下面的代码写入 Code/Pacman/include/gamestart.h 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gamestart.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _GAMESTART_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GAMESTART_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcomeScreen</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshape</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h3 id="源代码-6"><a href="#源代码-6" class="headerlink" title="源代码"></a>源代码</h3><p>将下面的代码写入 Code/Pacman/src/gamestart.cpp 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gamestart.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gamestart.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"monster.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"createpacman.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"laberynth.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gameover.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"food.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gameresult.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"control.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//欢迎界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcomeScreen</span><span class="params">()</span></span>&#123;</span><br><span class="line">    glClearColor(<span class="number">0</span>, <span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="built_in">string</span> message = <span class="string">"*************************************"</span>;</span><br><span class="line">    <span class="built_in">string</span>::iterator it = message.begin();</span><br><span class="line">    glRasterPos2f(<span class="number">150</span>, <span class="number">200</span>);</span><br><span class="line">    <span class="keyword">while</span> (it != message.end())&#123;</span><br><span class="line">        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    message = <span class="string">"Pacman - by Desmon"</span>;</span><br><span class="line">    glColor3f(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>); <span class="comment">//white</span></span><br><span class="line">    glRasterPos2f(<span class="number">225</span>, <span class="number">250</span>);</span><br><span class="line">    it = message.begin();</span><br><span class="line">    <span class="keyword">while</span> (it != message.end())&#123;</span><br><span class="line">        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    message = <span class="string">"*************************************"</span>;</span><br><span class="line">    glRasterPos2f(<span class="number">150</span>, <span class="number">300</span>);</span><br><span class="line">    it = message.begin();</span><br><span class="line">    <span class="keyword">while</span> (it != message.end())&#123;</span><br><span class="line">        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    message = <span class="string">"To control Pacman use A to go right, D to go left, W to go up and S to go down."</span>;</span><br><span class="line">    glRasterPos2f(<span class="number">50</span>, <span class="number">400</span>);</span><br><span class="line">    it = message.begin();</span><br><span class="line">    <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, *it++);</span><br><span class="line"></span><br><span class="line">    message = <span class="string">"To start or restart the game, press the space key."</span>;</span><br><span class="line">    glRasterPos2f(<span class="number">170</span>, <span class="number">450</span>);</span><br><span class="line">    it = message.begin();</span><br><span class="line">    <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, *it++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示屏幕和元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (points == <span class="number">1</span>)&#123;</span><br><span class="line">        over = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    keyOperations();</span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT); <span class="comment">//清除颜色缓冲区(当前被激活为写操作的颜色缓存)</span></span><br><span class="line">    gameOver();</span><br><span class="line">    <span class="keyword">if</span> (replay)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!over)&#123;</span><br><span class="line">            drawLaberynth();</span><br><span class="line">            drawFood((<span class="number">1.5</span> + xIncrement) * squareSize, (<span class="number">1.5</span> + yIncrement) * squareSize);</span><br><span class="line">            drawPacman(<span class="number">1.5</span> + xIncrement, <span class="number">1.5</span> + yIncrement, rotation);</span><br><span class="line">            updateMonster(monster1, <span class="number">1</span>);</span><br><span class="line">            updateMonster(monster2, <span class="number">2</span>);</span><br><span class="line">            updateMonster(monster3, <span class="number">3</span>);</span><br><span class="line">            updateMonster(monster4, <span class="number">4</span>);</span><br><span class="line">            drawMonster(monster1[<span class="number">0</span>], monster1[<span class="number">1</span>], <span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>); <span class="comment">//cyan</span></span><br><span class="line">            drawMonster(monster2[<span class="number">0</span>], monster2[<span class="number">1</span>], <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>); <span class="comment">//red</span></span><br><span class="line">            drawMonster(monster3[<span class="number">0</span>], monster3[<span class="number">1</span>], <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.6</span>); <span class="comment">//magenta</span></span><br><span class="line">            drawMonster(monster4[<span class="number">0</span>], monster4[<span class="number">1</span>], <span class="number">1.0</span>, <span class="number">0.3</span>, <span class="number">0.0</span>); <span class="comment">//orange</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            resultsDisplay();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        welcomeScreen();</span><br><span class="line">    &#125;</span><br><span class="line">    glutSwapBuffers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置窗口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reshape</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, (GLsizei)w, (GLsizei)h);</span><br><span class="line">    glOrtho(<span class="number">0</span>, <span class="number">750</span>, <span class="number">750</span>, <span class="number">0</span>, <span class="number">-1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    glMatrixMode(GL_MODELVIEW);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="游戏结果判断"><a href="#游戏结果判断" class="headerlink" title="游戏结果判断"></a>游戏结果判断</h2><p>到此游戏元素已经基本设计完成，这里我们给游戏设计一个结束判断模块，应该包括胜利条件和失败条件。</p><h3 id="头文件-7"><a href="#头文件-7" class="headerlink" title="头文件"></a>头文件</h3><p>将下面的代码写入 /Code/Pacman/include/gameover.h 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gameover.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _GAME_OVER_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GAME_OVER_H_</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gameOver</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h3 id="源代码-7"><a href="#源代码-7" class="headerlink" title="源代码"></a>源代码</h3><p>将下面的代码写入 Code/Pacman/src/gameover.cpp 文件中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gameover.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gameover.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"><span class="comment">//游戏结束</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gameOver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pacmanX = (<span class="keyword">int</span>)(<span class="number">1.5</span> + xIncrement);</span><br><span class="line">    <span class="keyword">int</span> pacmanY = (<span class="keyword">int</span>)(<span class="number">1.5</span> + yIncrement);</span><br><span class="line">    <span class="keyword">int</span> monster1X = (<span class="keyword">int</span>)(monster1[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">int</span> monster1Y = (<span class="keyword">int</span>)(monster1[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> monster2X = (<span class="keyword">int</span>)(monster2[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">int</span> monster2Y = (<span class="keyword">int</span>)(monster2[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> monster3X = (<span class="keyword">int</span>)(monster3[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">int</span> monster3Y = (<span class="keyword">int</span>)(monster3[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> monster4X = (<span class="keyword">int</span>)(monster4[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">int</span> monster4Y = (<span class="keyword">int</span>)(monster4[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (pacmanX == monster1X &amp;&amp; pacmanY == monster1Y)&#123;</span><br><span class="line">        over = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pacmanX == monster2X &amp;&amp; pacmanY == monster2Y)&#123;</span><br><span class="line">        over = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pacmanX == monster3X &amp;&amp; pacmanY == monster3Y)&#123;</span><br><span class="line">        over = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pacmanX == monster4X &amp;&amp; pacmanY == monster4Y)&#123;</span><br><span class="line">        over = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (points == <span class="number">106</span>)&#123;</span><br><span class="line">        over = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="游戏结果界面"><a href="#游戏结果界面" class="headerlink" title="游戏结果界面"></a>游戏结果界面</h2><p>到这里已经是尾声了，我们的游戏也已经结束了。在结构界面除了得分以外，我们可以人性化的提供一些提示来进行接下来的操作。</p><h3 id="头文件-8"><a href="#头文件-8" class="headerlink" title="头文件"></a>头文件</h3><p>将下面的代码写入 Code/Pacman/include/gameresult.h 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gameresult.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _GAMERESULT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GAMERESULT_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resultsDisplay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><h3 id="源代码-8"><a href="#源代码-8" class="headerlink" title="源代码"></a>源代码</h3><p>将下面的代码写入 Code/Pacman/src/gameresult.cpp 文件中：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gameresult.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gameresult.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"main.h"</span></span></span><br><span class="line"><span class="comment">//游戏结果</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resultsDisplay</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (points == <span class="number">106</span>)&#123;</span><br><span class="line">        <span class="comment">//胜利</span></span><br><span class="line">        <span class="built_in">string</span> message = <span class="string">"*************************************"</span>;</span><br><span class="line">        <span class="built_in">string</span>::iterator it = message.begin();</span><br><span class="line">        glRasterPos2f(<span class="number">170</span>, <span class="number">250</span>);</span><br><span class="line">        <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">            glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">        message = <span class="string">"CONGRATULATIONS, YOU WON! "</span>;</span><br><span class="line">        glColor3f(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        glRasterPos2f(<span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line">        it = message.begin();</span><br><span class="line">        <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">            glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">        message = <span class="string">"*************************************"</span>;</span><br><span class="line">        glRasterPos2f(<span class="number">170</span>, <span class="number">350</span>);</span><br><span class="line">        it = message.begin();</span><br><span class="line">        <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">            glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">        message = <span class="string">"To start or restart the game, press the space key."</span>;</span><br><span class="line">        glRasterPos2f(<span class="number">170</span>, <span class="number">550</span>);</span><br><span class="line">        it = message.begin();</span><br><span class="line">        <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">            glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, *it++);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//Lost</span></span><br><span class="line">        <span class="built_in">string</span> message = <span class="string">"*************************************"</span>;</span><br><span class="line">        <span class="built_in">string</span>::iterator it = message.begin();</span><br><span class="line">        glRasterPos2f(<span class="number">210</span>, <span class="number">250</span>);</span><br><span class="line">        <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">            glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">        message = <span class="string">"SORRY, YOU LOST ... "</span>;</span><br><span class="line">        glColor3f(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        glRasterPos2f(<span class="number">250</span>, <span class="number">300</span>);</span><br><span class="line">        it = message.begin();</span><br><span class="line">        <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">            glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">        message = <span class="string">"*************************"</span>;</span><br><span class="line">        glRasterPos2f(<span class="number">210</span>, <span class="number">350</span>);</span><br><span class="line">        it = message.begin();</span><br><span class="line">        <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">            glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">        message = <span class="string">"You got: "</span>;</span><br><span class="line">        glRasterPos2f(<span class="number">260</span>, <span class="number">400</span>);</span><br><span class="line">        it = message.begin();</span><br><span class="line">        <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">            glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">        <span class="built_in">string</span> result = to_string(points);</span><br><span class="line">        message = (<span class="keyword">char</span>*)result.c_str();</span><br><span class="line">        glRasterPos2f(<span class="number">350</span>, <span class="number">400</span>);</span><br><span class="line">        it = message.begin();</span><br><span class="line">        <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">            glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">        message = <span class="string">" points!"</span>;</span><br><span class="line">        glRasterPos2f(<span class="number">385</span>, <span class="number">400</span>);</span><br><span class="line">        it = message.begin();</span><br><span class="line">        <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">            glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *it++);</span><br><span class="line">        message = <span class="string">"To start or restart the game, press the space key."</span>;</span><br><span class="line">        glRasterPos2f(<span class="number">170</span>, <span class="number">550</span>);</span><br><span class="line">        it = message.begin();</span><br><span class="line">        <span class="keyword">while</span> (it!=message.end())</span><br><span class="line">            glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, *it++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Makefile-着重学习"><a href="#Makefile-着重学习" class="headerlink" title="Makefile(着重学习)"></a>Makefile(着重学习)</h1><p>最后一步就是对源代码进行编译了，这里有两种方式，看个人喜好来选择。</p><ol><li>g++方式，这种方式好处是简单明了，弊端是每次编译都需要敲入有些麻烦。首先在终端进入Pacman/src/目录</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ *.cpp -<span class="built_in">std</span>=c++<span class="number">11</span> -Wall -I../include -lglut -lGL -o ../bin/</span><br></pre></td></tr></table></figure><ol start="2"><li>Makefile 方式，首先在 Pacman/src/ 目录下建立 Makefile 文件。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#编译方式</span><br><span class="line">CC = g++ </span><br><span class="line">#C++版本，显示所有警告</span><br><span class="line">VERSION = -g -std=c++11 -Wall</span><br><span class="line">#头文件和库文件</span><br><span class="line">INCLUDE = -I../include -lglut -lGL</span><br><span class="line">#目标文件，最后生成文件</span><br><span class="line">TARGET = ../bin/Pacman</span><br><span class="line">#源代码路径</span><br><span class="line">SRCS = $(wildcard *.cpp) </span><br><span class="line">#编译为.o文件</span><br><span class="line">OBJS = $(patsubst %cpp,%o,$(SRCS))</span><br><span class="line"></span><br><span class="line">all:$(TARGET)</span><br><span class="line">#执行编译    </span><br><span class="line">$(TARGET):$(OBJS)</span><br><span class="line">    $(CC) $(OBJS) $(VERSION) $(INCLUDE) -o $(TARGET)</span><br><span class="line"></span><br><span class="line">%.o:%.cpp</span><br><span class="line">    $(CC) $(VERSION) $(INCLUDE) -c $&lt;</span><br><span class="line">#清除</span><br><span class="line">.PHONY:clean</span><br><span class="line">clean:</span><br><span class="line">    rm -rf $(OBJS) $(TARGET)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验介绍&quot;&gt;&lt;a href=&quot;#实验介绍&quot; class=&quot;headerlink&quot; title=&quot;实验介绍&quot;&gt;&lt;/a&gt;实验介绍&lt;/h1&gt;&lt;p&gt;这个小项目是参考实验楼的免费项目来做的，因此整个博客基本与其相同。有兴趣的同学可以直接在其官网查找学习即可。我的实验环境也主
      
    
    </summary>
    
      <category term="OpenGL学习" scheme="https://github.com/DesmonDay/categories/OpenGL%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>CVTE技术面试(找字符串中的最长回文子串)</title>
    <link href="https://github.com/DesmonDay/2019/02/15/CVTE%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95/"/>
    <id>https://github.com/DesmonDay/2019/02/15/CVTE技术面试/</id>
    <published>2019-02-15T06:35:28.000Z</published>
    <updated>2019-02-15T08:26:12.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVTE技术面——最长回文串"><a href="#CVTE技术面——最长回文串" class="headerlink" title="CVTE技术面——最长回文串"></a>CVTE技术面——最长回文串</h1><p>我面的是C++岗位，说是技术面，但实际上问的很少有C++相关的内容。更主要的是围绕项目来问问题，但因为我的项目没有与C++相关的，因此面试官也问不出什么。印象比较深刻的是问了一道算法题，即从字符串中找到最长的回文串。而我当时只想到了最简单暴力的O(n^3)的做法。下面把这道题详细说明如下：</p><p>回文串，即一个字符串正读和倒着读均一样，如aba。而判断回文串的方法很简单，只需用一次循环，依次将第一个字符和最后一个字符，第二个字符和倒数第二个字符依次进行比较，以此类推。若均相等，则为回文串。</p><p><a href="https://blog.csdn.net/csdnnews/article/details/82920678" target="_blank" rel="noopener">https://blog.csdn.net/csdnnews/article/details/82920678</a> 漫画解题</p><h2 id="暴力解法O-n-3"><a href="#暴力解法O-n-3" class="headerlink" title="暴力解法O(n^3)"></a>暴力解法O(n^3)</h2><p>找出这个字符串的所有子串，然后依次判断该子串是否为回文。这种方法一共要O(n^3)的时间，空间则为O(1)。很明显，时间复杂度过高。</p><h2 id="动态规划O-n-2"><a href="#动态规划O-n-2" class="headerlink" title="动态规划O(n^2)"></a>动态规划O(n^2)</h2><p>设状态dp[j][i]表示索引j到索引i的子串是否是回文串。则转移方程为：<br><img src="https://upload-images.jianshu.io/upload_images/8636110-7674e98187a00400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>则dp[j][i]为true时表示索引j到索引i形成的子串为回文子串，且子串起点索引为j,长度为i - j + 1。</p><p>dp[i][j]的递推公式可以这么表述：</p><ol><li><p>首先，对dp的对角线元素初始化为1，也就是当i == j时，dp[i][j] = 1。显然，每个单独的字符其实就是一个长度为1的回文串。</p></li><li><p>当j-i == 1时，若s[i] == s[j]，则dp[i][j]=2，否则dp[i][j] = 0. 解释如下：当j-i==1时，若s[i]=s[j]，则s[i]和s[j]可以组成一个长度为2的回文串。若s[i]!=s[j]，显然他们不可能组成回文串，dp[i][j]=0.</p></li><li><p>当j-i &gt;= 2时: (1)若s[i]==s[j]: 若dp[i+1][j-1]&gt;0，则dp[i][j]=dp[i+1][j-1]+2；否则dp[i][j]=0。 (2)若s[i] != s[j]: dp[i][j]=0.</p></li></ol><p>解释如下：如果s[i]==s[j]，表明这个子串有可能是回文串。当去头去尾后它是回文串时，就可以在去头去尾的回文串长度基础上+2，得到它的长度。如果去头去尾后不是回文串，则该子串一定不是回文串，回文串长度只能是0.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n = s.size();</span><br><span class="line">    <span class="keyword">bool</span> dp[n][n];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxlen = <span class="number">1</span>;  <span class="comment">//保存最长回文子串长度</span></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;   <span class="comment">//保存最长回文子串起点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i - j &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                dp[j][i] = (s[i] == s[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dp[j][i] = (s[i] == s[j] &amp;&amp; dp[j+<span class="number">1</span>][i<span class="number">-1</span>]);</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(dp[j][i] &amp;&amp; maxlen &lt; i - j + <span class="number">1</span>) &#123;</span><br><span class="line">                maxlen = i - j + <span class="number">1</span>;</span><br><span class="line">                start = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中心扩展法"><a href="#中心扩展法" class="headerlink" title="中心扩展法"></a>中心扩展法</h2><p>中心扩展就是把给定的字符串的每一个字母当做中心，向两边扩展，这样来找最长的子回文串。算法复杂度为O(n^2)。<br>需要考虑两种情况：长度为奇数的回文串，比如a, aba, abcba；长度为偶数的回文串，比如aa, abba</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> &amp;s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> len = s.size();</span><br><span class="line">    <span class="keyword">int</span> maxlen = <span class="number">1</span>; <span class="comment">//保存最长回文子串长度</span></span><br><span class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;  <span class="comment">//保存最长回文子串起点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123; <span class="comment">//求长度为奇数的回文串</span></span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>, k = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; k &lt; len &amp;&amp; s.at(j) == s.at(k))&#123; <span class="comment">//at函数表示返回对应下标的元素引用</span></span><br><span class="line">            <span class="keyword">if</span>(k-j+<span class="number">1</span> &gt; maxlen)&#123;</span><br><span class="line">                maxlen = k - j + <span class="number">1</span>;</span><br><span class="line">                start = j;</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;len; i++)&#123; <span class="comment">//求长度为偶数的回文串</span></span><br><span class="line">        <span class="keyword">int</span> j = i, k = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; k &lt; len &amp;&amp; s.at(j) == s.at(k))&#123;</span><br><span class="line">            <span class="keyword">if</span>(k - j + <span class="number">1</span> &gt; maxlen)&#123;</span><br><span class="line">                maxlen = k - j + <span class="number">1</span>;</span><br><span class="line">                start = j;</span><br><span class="line">            &#125;</span><br><span class="line">            j--;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s.substr(start, maxlen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CVTE技术面——最长回文串&quot;&gt;&lt;a href=&quot;#CVTE技术面——最长回文串&quot; class=&quot;headerlink&quot; title=&quot;CVTE技术面——最长回文串&quot;&gt;&lt;/a&gt;CVTE技术面——最长回文串&lt;/h1&gt;&lt;p&gt;我面的是C++岗位，说是技术面，但实际上问的
      
    
    </summary>
    
      <category term="找工作" scheme="https://github.com/DesmonDay/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>对文件的输入输出(C语言)</title>
    <link href="https://github.com/DesmonDay/2019/02/10/%E5%AF%B9%E6%96%87%E4%BB%B6%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>https://github.com/DesmonDay/2019/02/10/对文件的输入输出/</id>
    <published>2019-02-10T12:56:55.000Z</published>
    <updated>2019-02-10T15:42:58.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C文件的有关基础知识"><a href="#C文件的有关基础知识" class="headerlink" title="C文件的有关基础知识"></a>C文件的有关基础知识</h1><h2 id="什么是文件"><a href="#什么是文件" class="headerlink" title="什么是文件"></a>什么是文件</h2><p>程序文件、数据文件。操作系统把各种设备都统一作为文件来处理。通常将输入输出形象地称为流，即数据流。一个输入输出流就是一个字符流或字节（内容为二进制数据）流。</p><h2 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h2><p>文件标识包括3部分：文件路径，文件名主干，文件后缀。</p><h2 id="文件的分类"><a href="#文件的分类" class="headerlink" title="文件的分类"></a>文件的分类</h2><p>数据文件可分为ASCII文件和二进制文件。字符一律以ASCII形式存储，数值型数据既可以用ASCII形式存储，也可以用二进制形式存储。</p><p>用ASCII码形式输出时字节与字符一一对应，一个字节代表一个字符。</p><h2 id="文件缓冲区"><a href="#文件缓冲区" class="headerlink" title="文件缓冲区"></a>文件缓冲区</h2><p>ANSI C标准采用”缓冲文件系统”处理数据文件，指系统自动地在内存区为程序中每一个正在使用的文件开辟一个文件缓冲区。</p><h2 id="文件类型指针"><a href="#文件类型指针" class="headerlink" title="文件类型指针"></a>文件类型指针</h2><p>文件类型指针简称文件指针。每个被使用的文件都在内存中开辟一个相应的文件信息区，用来存放文件的有关信息，这些信息保存在一个结构体变量中，取名为FILE，在stdio.h文件中声明。</p><p>一般不定义FILE类型的变量命名，也就是不通过变量的名字来引用这些变量，而是设置一个指向FILE类型变量的指针变量，然后通过它来引用这些FILE类型变量。如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;</span><br></pre></td></tr></table></figure></p><p>通过文件指针变量能够找到与它关联的文件。</p><h1 id="打开与关闭文件"><a href="#打开与关闭文件" class="headerlink" title="打开与关闭文件"></a>打开与关闭文件</h1><h2 id="用fopen函数打开数据文件"><a href="#用fopen函数打开数据文件" class="headerlink" title="用fopen函数打开数据文件"></a>用fopen函数打开数据文件</h2><p>fopen函数的调用方式为：fopen(文件名，使用文件方式)。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;</span><br><span class="line">fp = fopen(<span class="string">"a1"</span>, <span class="string">"r"</span>);</span><br></pre></td></tr></table></figure></p><p>使用文件方式还包括：只读(r), 只写(w), 等等。常用以下方法打开一个文件：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((fp == fopen(<span class="string">"file1"</span>, <span class="string">"r"</span>)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cannot open this file\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="用fclose函数关闭数据文件"><a href="#用fclose函数关闭数据文件" class="headerlink" title="用fclose函数关闭数据文件"></a>用fclose函数关闭数据文件</h2><p>关闭文件用fclose函数，fclose函数调用的一般形式为：fclose(文件指针)。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fclose(fp);</span><br></pre></td></tr></table></figure></p><p>该函数也带回一个值，当成功地执行了关闭操作，则返回值为0，否则返回EOF(-1)。</p><h1 id="顺序读写数据文件"><a href="#顺序读写数据文件" class="headerlink" title="顺序读写数据文件"></a>顺序读写数据文件</h1><h2 id="向文件读写字符"><a href="#向文件读写字符" class="headerlink" title="向文件读写字符"></a>向文件读写字符</h2><ol><li>函数名：fgetc，调用方式：fgetc(fp)，功能：从fp指向的文件读入一个字符，返回值：读成功，带回所读的字符，失败则返回文件结束标志EOF(即-1)。</li><li>函数名：fputc，调用方式：fputc(ch,fp)，功能：把字符ch写到文件指针变量fp所指向的文件中，返回值：输出成功，返回值就是输出的字符，失败则返回EOF。</li></ol><p>举例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FILE *in, *out;</span><br><span class="line">    <span class="keyword">char</span> ch, infile[<span class="number">10</span>], outfile[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入读入文件的名字："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, infile);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"输入输出文件的名字："</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, outfile);</span><br><span class="line">    <span class="keyword">if</span>((in=fopen(infile,<span class="string">"r"</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"无法打开文件\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((out=fopen(outfile,<span class="string">"w"</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"无法打开文件\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ch = fgetc(in);</span><br><span class="line">    <span class="keyword">while</span>(!feof(in))&#123; <span class="comment">//如果未达到输入文件的结束标志</span></span><br><span class="line">        fputc(ch,out); <span class="comment">//将ch写到输出文件</span></span><br><span class="line">        <span class="built_in">putchar</span>(ch);   <span class="comment">//将ch显示到屏幕上</span></span><br><span class="line">        ch = fgetc(in); <span class="comment">//再从输入文件读入一个字符，赋给变量ch</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    fclose(in);</span><br><span class="line">    fclose(out);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="向文件读写字符串"><a href="#向文件读写字符串" class="headerlink" title="向文件读写字符串"></a>向文件读写字符串</h2><ol><li>函数名：fgets，调用形式：fgets(str,n,fp)，功能：从fp指向的文件读入一个长度为n-1的字符串(最后会加上一个’\0’结束符)，存放到字符数组str中，返回值：读成功，返回地址str，失败则返回NULL。</li></ol><p>函数原型：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fgets</span><span class="params">(<span class="keyword">char</span>* str, <span class="keyword">int</span> n, FILE* fp)</span></span>;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>函数名：fputs，调用形式：fputs(str,fp)，功能：把str所指向的字符串写到文件指针变量fp所指向的文件中，返回值：输出成功，返回0，否则返回非0值。</li></ol><p>函数原型：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">(<span class="keyword">char</span> *str, FILE *fp)</span></span>;</span><br></pre></td></tr></table></figure></p><p>举例：从键盘读入若干个字符串，对它们按字母大小的顺序排序，然后把排好序的字符串送到磁盘文件中保存。<br>具体分为以下步骤：</p><ol><li>从键盘中读入n个字符串，存放在一个二维字符数组中，每个以为数组存放一个字符串；</li><li>对字符数组中的n个字符串按字母顺序排序，排好序的字符串仍存放在字符数组中；</li><li>将字符数组中的字符串顺序输出。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">3</span>][<span class="number">10</span>], temp[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> i,j,k,n=<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter strings:\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        gets(str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用选择法对字符串排序</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        k = i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>; j&lt;n; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str[k],str[j])&gt;<span class="number">0</span>) k = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k != i)&#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(temp, str[i]);</span><br><span class="line">            <span class="built_in">strcpy</span>(str[i],str[k]);</span><br><span class="line">            <span class="built_in">strcpy</span>(str[k], temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fp = fopen(<span class="string">"sfd.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="built_in">fputs</span>(str[i], fp); <span class="comment">// 将str[i]所指的字符串写入文件</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用格式化的方式读写文本文件"><a href="#用格式化的方式读写文本文件" class="headerlink" title="用格式化的方式读写文本文件"></a>用格式化的方式读写文本文件</h2><p>对文件进行格式化输入输出要用fprintf函数和fscanf函数，从函数名可以看到，它们只是在printf和scanf的前面加了一个f。它们的作用与printf和scanf函数相仿，都是格式化读写函数。不同点是，fprintf和fscanf函数的读写对象不是终端，而是文件。</p><p>一般调用方式为：<br>fprintf(文件指针，格式字符串，输出表列);<br>fscanf(文件指针，格式字符串，输入表列);</p><p>例如:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fprintf</span>(fp, <span class="string">"%d,%6.2f"</span>, i, f);</span><br><span class="line"><span class="built_in">fscanf</span>(fp, <span class="string">"%d,%f"</span>, &amp;i, &amp;f);</span><br></pre></td></tr></table></figure></p><p>在内存与磁盘频繁交换数据的情况下，最好不用fprintf和fscanf函数，而用下面介绍的fread和fwrite函数进行二进制的读写。</p><h2 id="用二进制方法向文件读写一组数据"><a href="#用二进制方法向文件读写一组数据" class="headerlink" title="用二进制方法向文件读写一组数据"></a>用二进制方法向文件读写一组数据</h2><p>一般调用形式为：<br>fread(buffer, size, count, fp): </p><p>buffer是一个地址，对fread来说，它是用来存放从文件读入的数据的存储区的地址；对fwrite来说，是把此地址开始的存储区中的数据向文件输出。<br>size：要读写的字节数<br>count:要读写多少个数据项（每个数据项长度为size）<br>fp: FILE类型指针。</p><p>例如: fread(f, 4, 10, fp)表示f是一个float型数组名(代表数组首元素地址)，该函数从fp所指向的文件读入10个4个字节的数据，存储到数组f中。</p><h1 id="随机读写数据文件"><a href="#随机读写数据文件" class="headerlink" title="随机读写数据文件"></a>随机读写数据文件</h1><h2 id="文件位置标记及其定位"><a href="#文件位置标记及其定位" class="headerlink" title="文件位置标记及其定位"></a>文件位置标记及其定位</h2><p>为了对读写进行控制，系统为每个文件设置了一个文件读写位置标记（简称文件位置标记或文件标记），用来指示“接下来要读写的下一个字符的位置。</p><p>一般情况下，在对字符文件进行顺序读写时，文件位置标记指向文件开头，这时如果对文件进行读操作，就读1个字符，然后文件位置标记向后移一个位置。</p><p>我们可以根据读写的需要，人为地移动文件位置标记的位置，这时便是随机读写。</p><h2 id="文件位置标记的定位"><a href="#文件位置标记的定位" class="headerlink" title="文件位置标记的定位"></a>文件位置标记的定位</h2><p>可以强制使文件位置标记指向人们指定的对象。可以用以下函数实现：</p><ol><li>用rewind函数使文件标记位置指向文件开头，无返回值，同时feof函数的值会恢复为0: rewind(fp);</li><li>用fseek函数改变文件位置标记，调用形式为：fseek(文件类型指针，位移量，起始点) 其中，起始点用0，1,或2代替，0表示文件开始位置，1表示当前位置，2表示文件末尾位置。“位移量”指以起始点为基点，向前移动的字节数，位移量应是long型数据(在数字的末尾加一个字母L，就表示是long型)。</li><li>ftell函数可测定文件位置标记的当前位置，即用于得到文件位置指针当前位置相对于文件首的偏移字节数。</li></ol><p>举例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student_type</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">char</span> addr[<span class="number">15</span>];</span><br><span class="line">&#125;stud[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">"stu.dat"</span>,<span class="string">"rb"</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"cannot open file\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">        fseek(fp,i*<span class="keyword">sizeof</span>(struct Student_type),<span class="number">0</span>);  <span class="comment">//移动文件位置标记</span></span><br><span class="line">        fread(&amp;stud[i],<span class="keyword">sizeof</span>(struct Student_type),<span class="number">1</span>,fp); <span class="comment">//读一个数据块到结构体变量</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%-10s %4d %4d %-15s\n"</span>, stud[i].name, stud[i].num, stud[i].age, stud[i].addr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="文件读写的出错检测"><a href="#文件读写的出错检测" class="headerlink" title="文件读写的出错检测"></a>文件读写的出错检测</h1><h2 id="ferror函数"><a href="#ferror函数" class="headerlink" title="ferror函数"></a>ferror函数</h2><p>在调用各种输入输出函数时如果出现错误，除了函数返回值有所反映外，还可以用ferror函数检查。其一般调用形式为ferror(fp)。如果ferror返回值为0，表示未出错。</p><h2 id="chearerr函数"><a href="#chearerr函数" class="headerlink" title="chearerr函数"></a>chearerr函数</h2><p>作用是使文件出错标记和文件结束标记置为0。假设在盗用一个输入输出函数时出现错误，ferror函数值为一个非零值，应该立即调用clearerr(fp)，使ferror(fp)的值变为0，以便再进行下一次的检测。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C文件的有关基础知识&quot;&gt;&lt;a href=&quot;#C文件的有关基础知识&quot; class=&quot;headerlink&quot; title=&quot;C文件的有关基础知识&quot;&gt;&lt;/a&gt;C文件的有关基础知识&lt;/h1&gt;&lt;h2 id=&quot;什么是文件&quot;&gt;&lt;a href=&quot;#什么是文件&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-二叉树中和为某一值的路径</title>
    <link href="https://github.com/DesmonDay/2019/02/03/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <id>https://github.com/DesmonDay/2019/02/03/剑指Offer-二叉树中和为某一值的路径/</id>
    <published>2019-02-03T07:38:07.000Z</published>
    <updated>2019-02-03T07:44:37.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。(注意: 在返回值的list中，数组长度大的数组靠前)</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>使用二维数组来存储路径。注意要明白递归的思路，另外，二叉树遍历的方法来懂得变通，针对左右子树进行递归。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; x;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; FindPath(TreeNode* root, <span class="keyword">int</span> expectNumber) &#123;</span><br><span class="line">        <span class="keyword">if</span>(root) DFS(root, expectNumber);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(TreeNode *root, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        temp.push_back(root-&gt;val);</span><br><span class="line">        <span class="keyword">if</span>((k - root-&gt;val == <span class="number">0</span>) &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right)</span><br><span class="line">            x.push_back(temp);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left)</span><br><span class="line">            DFS(root-&gt;left, k - root-&gt;val);</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right)</span><br><span class="line">            DFS(root-&gt;right, k - root-&gt;val);</span><br><span class="line">        temp.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一颗二叉树的跟节点和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>CVTE电话面试</title>
    <link href="https://github.com/DesmonDay/2019/01/23/CVTE%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95/"/>
    <id>https://github.com/DesmonDay/2019/01/23/CVTE电话面试/</id>
    <published>2019-01-23T13:33:12.000Z</published>
    <updated>2019-01-23T13:35:22.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVTE"><a href="#CVTE" class="headerlink" title="CVTE"></a>CVTE</h1><h2 id="计网"><a href="#计网" class="headerlink" title="计网"></a>计网</h2><p>一个客户端和服务端通信，如果客户端突然关机，服务端能检测到吗？</p><p>在浏览器上方输入一个域名，之后会产生什么请求？(HTTP协议)</p><p>TCP和UDP的区别</p><p>TCP的滑动窗口协议</p><p>有尝试过网络编程吗？</p><h2 id="操作系统："><a href="#操作系统：" class="headerlink" title="操作系统："></a>操作系统：</h2><p>多线程和多进程的区别</p><p>线程进程哪个切换花销大，为什么</p><p>死锁的概念，如何避免死锁，在编程中如何设置一个死锁的例子</p><p>举一点同步的例子</p><p>有在编程中用过进程同步之类的吗？（我回答，C++11有，但是我不太记得了）</p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>用过共享指针吗？它的作用是什么？</p><p>多态了解吗？</p><p>假设一个基类有虚函数，派生类对其进行重写，是怎么调用到自己实现的函数的？（虚函数表）</p><p>一个类A，一个类B，类C继承A、B，那么类C有多少个虚函数表，表里的内容有什么？</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>哪个最满意，遇到了什么困难？</p><p>还有吗？我讲了安卓项目，然后他帮我总结，噢~你就是参考别人的代码进行修改，实现对应的功能</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CVTE&quot;&gt;&lt;a href=&quot;#CVTE&quot; class=&quot;headerlink&quot; title=&quot;CVTE&quot;&gt;&lt;/a&gt;CVTE&lt;/h1&gt;&lt;h2 id=&quot;计网&quot;&gt;&lt;a href=&quot;#计网&quot; class=&quot;headerlink&quot; title=&quot;计网&quot;&gt;&lt;/a&gt;计网&lt;/h
      
    
    </summary>
    
      <category term="找工作" scheme="https://github.com/DesmonDay/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>剑指Offer-二叉搜索树的后序遍历序列</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-二叉搜索树的后序遍历序列/</id>
    <published>2019-01-20T13:52:48.000Z</published>
    <updated>2019-01-20T13:57:46.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数字都互不相同。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这道题又是没有思路，只能看看提示。自己也是够蠢，居然忘记了后序遍历根的特性！！！BST(Binary-Search-Tree)的后序序列的合法序列是，对于一个序列S，最后一个元素是x(也就是根)，如果去掉最后一个元素的序列为T，那么T满足：T可以分成两段，前一段（左子树）小于x，后一段（右子树）大于x，且这两段（子树）都是合法的后序序列。使用递归即可解决。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">VerifySquenceOfBST</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sequence)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sequence.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(sequence.size()==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;   </span><br><span class="line">        <span class="keyword">return</span> verifybst(sequence, <span class="number">0</span>, sequence.size()<span class="number">-1</span>);<span class="comment">//相信自己的第一直觉</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">verifybst</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bst, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = begin;</span><br><span class="line">        <span class="keyword">while</span>(bst[i] &lt; bst[end]) <span class="comment">// 左半部分</span></span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">for</span>(; j&lt;end; j++) <span class="comment">// 右半部分</span></span><br><span class="line">            <span class="keyword">if</span>(bst[j] &lt; bst[end]) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(j == end) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//！这里是教训</span></span><br><span class="line">        <span class="keyword">return</span> verifybst(bst, begin, i<span class="number">-1</span>) &amp; verifybst(bst, i, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>记住，不一定只能使用一个函数，在必要的时候可能定义其他函数。另外，必须要有结束的条件，因此必定有return false和return true两种情况，吸取教训！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则输出Yes,否则输出No。假设输入的数组的任意两个数
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-边界条件的判断</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-从上往下打印二叉树/</id>
    <published>2019-01-20T09:34:29.000Z</published>
    <updated>2019-01-20T09:35:56.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这道题其实就是简单的层次遍历。但是我总是会忽略一点，首先要进行边界条件的判断！！！</p><pre><code class="cpp"><span class="comment">/*</span><span class="comment">struct TreeNode {</span><span class="comment">    int val;</span><span class="comment">    struct TreeNode *left;</span><span class="comment">    struct TreeNode *right;</span><span class="comment">    TreeNode(int x) :</span><span class="comment">            val(x), left(NULL), right(NULL) {</span><span class="comment">    }</span><span class="comment">};*/</span><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span><span class="keyword">public</span>:    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; PrintFromTopToBottom(TreeNode* root) {        <span class="comment">// 层次遍历</span>        <span class="built_in">queue</span>&lt;TreeNode*&gt; q;        TreeNode* temp = <span class="literal">NULL</span>;        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;        <span class="keyword">if</span>(!root) <span class="keyword">return</span> num; <span class="comment">//这一步很重要！！！边界条件的判断</span>        q.push(root);        <span class="keyword">while</span>(!q.empty()){            temp = q.front();            num.push_back(temp-&gt;val);            q.pop();            <span class="keyword">if</span>(temp-&gt;left)                 q.push(temp-&gt;left);            <span class="keyword">if</span>(temp-&gt;right)                q.push(temp-&gt;right);        }        <span class="keyword">return</span> num;    }};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;从上往下打印出二叉树的每个节点，同层节点从左至右打印。&lt;/p&gt;
&lt;h1 id=&quot;思路分析&quot;&gt;&lt;a href=&quot;#思路分析&quot; 
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-栈的压入、弹出序列</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-栈的压入、弹出序列/</id>
    <published>2019-01-20T09:02:55.000Z</published>
    <updated>2019-01-20T09:13:43.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这种题目，最直观的思路就是模拟给定的入栈出栈的过程。首先，必须要判断<strong>边界条件</strong>！！接着，模拟整个过程，设置一个辅助栈，根据给定的入栈顺序依次压入数字，若其间有出现栈顶数据与出栈序列的首个数据相同的情况，则弹出栈元素，同时相当于遍历了一个出栈元素(此部分要用while循环来控制，若出现多次连续的符合要求的情况，则可方便的处理)；若不同，则继续入栈。</p><p>若出栈序列合法，则很明显最终栈空，若栈不为空，说明不合法。<br>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">IsPopOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pushV,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; popV)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查看了一个博客的小提示，直观的思路就是根据已知的入栈和出栈序列来进行模拟。</span></span><br><span class="line">        <span class="keyword">if</span>(pushV.size()!=popV.size() || !pushV.size() || !popV.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;pushV.size(); i++)&#123;</span><br><span class="line">            temp.push(pushV[i]);</span><br><span class="line">            <span class="keyword">while</span>(!temp.empty())&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp.top() == popV[j])&#123;</span><br><span class="line">                    temp.pop();</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-包含min函数的栈</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-包含min函数的栈/</id>
    <published>2019-01-20T08:02:53.000Z</published>
    <updated>2019-01-20T08:21:19.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>定义栈的数据结构，使用类便可以建立。需要实现push,pop,top和min函数。这道题我在复习数据结构的时候看过，当时觉得挺巧妙，但是一转眼就忘了。随意查了一下博客，很快便想起来是怎么做的。</p><p>最基本的方法如下，即采用一个辅助栈来实现：辅助栈专门用来存储当前数据栈中的元素的最小值。当数据栈中push进第一个元素，该元素也得进辅助栈；当数据栈中再次push进元素，该元素如果小于辅助栈中的最上边的元素，将该元素push进辅助栈；否则，新push进的元素大于辅助栈的最上边的元素，此时，辅助栈的最上边的元素再次入栈。</p><p>实现如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        origin.push(value);</span><br><span class="line">        <span class="keyword">if</span>(min_.empty())       </span><br><span class="line">            min_.push(value);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(value &lt; min_.top()) <span class="comment">//若入栈元素小于最小值栈的顶元素</span></span><br><span class="line">                min_.push(value);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                min_.push(min_.top());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!origin.empty())&#123;</span><br><span class="line">            origin.pop();</span><br><span class="line">            min_.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> origin.top();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min_.top();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; origin;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; min_; <span class="comment">// 辅助栈</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>当然，我们也可以不需要每次用新的元素时都要往辅助栈内入栈，而可以通过判断大小来入栈。与上一种方法不同的是，这里不需要每次来新的元素都要往min_栈内添加元素，而可以只添加小于或等于当前栈顶部的元素。<br>如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        origin.push(value);</span><br><span class="line">        <span class="keyword">if</span>(min_.empty()) <span class="comment">//这里要注意！不可以用origin.empty()来判断了</span></span><br><span class="line">            min_.push(value);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(value &lt;= min_.top()) <span class="comment">//相等的也入栈</span></span><br><span class="line">                min_.push(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(origin.top()==min_.top())</span><br><span class="line">            min_.pop();</span><br><span class="line">        origin.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> origin.top();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min_.top();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; origin;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; min_; <span class="comment">// 辅助栈</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-顺时针打印矩阵(难)</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-顺时针打印矩阵/</id>
    <published>2019-01-20T04:57:09.000Z</published>
    <updated>2019-01-20T07:44:03.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这道题我没有一个正确的思路，因此想不出如何做。直接参考了《剑指Offer》一书。</p><p>当我们遇到一个复杂问题的时候，可以用图形来帮助思考。由于是以从外圈到内圈的顺序依次打印的，所以我们可以把矩阵想象成若干个圈。我们可以用一个循环来打印矩阵，每次打印矩阵的一个圈。接着，我参考了 <a href="https://www.nowcoder.com/profile/6606749/codeBookDetail?submissionId=15814779" target="_blank" rel="noopener">https://www.nowcoder.com/profile/6606749/codeBookDetail?submissionId=15814779</a> 的写法。下面是对这道题解法的详细说明。感觉有点混乱啊！！！</p><pre><code class="cpp"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>{</span><span class="keyword">public</span>:    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printMatrix(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; matrix) {        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;        <span class="keyword">int</span> rows = matrix.size();        <span class="keyword">int</span> cols = matrix[<span class="number">0</span>].size();        <span class="keyword">int</span> circles = ((rows&lt;cols ?: rows:cols)<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>; <span class="comment">//求打印圈数</span>        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;circles; i++){            <span class="comment">// 从左往右打印</span>            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;cols-i; j++){                num.push_back(matrix[i][j]);            }            <span class="comment">// 从上往下打印</span>            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;rows-i; j++){ <span class="comment">//最后一行为rows-i-1</span>                num.push_back(matrix[j][cols-i<span class="number">-1</span>]);            }            <span class="comment">// 从右往左打印，其中(rows-i-1!=i)避免重复打印</span>            <span class="keyword">for</span>(<span class="keyword">int</span> j=cols-i<span class="number">-2</span>; (j&gt;=i)&amp;&amp;(rows-i<span class="number">-1</span>!=i); j--){                num.push_back(matrix[rows-i<span class="number">-1</span>][j]);            }            <span class="comment">// 从下往上打印</span>            <span class="keyword">for</span>(<span class="keyword">int</span> j=rows-i<span class="number">-2</span>; (j&gt;=i+<span class="number">1</span>)&amp;&amp;(i!=cols-i<span class="number">-1</span>); j--){                num.push_back(matrix[j][i]);            }        }        <span class="keyword">return</span> num;    }}</code></pre><p>其中rows-i-1!=i与cols-i-1!=i的限制就是单行或单列只打印一次，这个判断条件要特别注意。这道题没有什么特别的技巧，要注意的点就是确定for循环的条件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵： 1 2 3 4 5 6 7
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-二叉树的镜像</title>
    <link href="https://github.com/DesmonDay/2019/01/20/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>https://github.com/DesmonDay/2019/01/20/剑指Offer-二叉树的镜像/</id>
    <published>2019-01-20T04:51:50.000Z</published>
    <updated>2019-01-20T04:53:29.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>操作给定的二叉树，将其变换为源二叉树的镜像。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>就按照自己的思路来写，不要怀疑自己。其实题目挺简单的，使用递归方法即可完成。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Mirror</span><span class="params">(TreeNode *pRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pRoot == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        TreeNode* tmp = pRoot-&gt;left;</span><br><span class="line">        pRoot-&gt;left = pRoot-&gt;right;</span><br><span class="line">        pRoot-&gt;right = tmp;</span><br><span class="line">        </span><br><span class="line">        Mirror(pRoot-&gt;left);</span><br><span class="line">        Mirror(pRoot-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;操作给定的二叉树，将其变换为源二叉树的镜像。&lt;/p&gt;
&lt;h1 id=&quot;思路分析&quot;&gt;&lt;a href=&quot;#思路分析&quot; class
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-树的子结构(难)</title>
    <link href="https://github.com/DesmonDay/2019/01/18/%E5%89%91%E6%8C%87Offer-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/"/>
    <id>https://github.com/DesmonDay/2019/01/18/剑指Offer-树的子结构/</id>
    <published>2019-01-18T09:16:23.000Z</published>
    <updated>2019-01-18T14:54:52.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>思路参考《剑指Offer》一书。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">right</span>;</span></span><br><span class="line">    TreeNode(<span class="keyword">int</span> x) :</span><br><span class="line">            val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这道题，我不会，一点思路都没有，只能直接看答案了。。。 哎，还是要多多练练。要在树A中找到和树B的根节点的值一样的节点R；第二步，判断树A中以R为根节点的子树是不是包含和树B一样的结构。</p><p>第一步在树A中查找与根节点的值一样的节点，实际上就是树的遍历，采用递归的方式，对应代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">HasSubtree</span><span class="params">(TreeNode* pRoot1, TreeNode* pRoot2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> result = <span class="literal">false</span>; <span class="comment">//检查空指针</span></span><br><span class="line">        <span class="comment">// 第一步在在树A中查找与根节点的值一样的节点</span></span><br><span class="line">        <span class="keyword">if</span>(pRoot1 &amp;&amp; pRoot2)&#123; <span class="comment">//类似前序遍历</span></span><br><span class="line">            <span class="keyword">if</span>(pRoot1-&gt;val == pRoot2-&gt;val)&#123;</span><br><span class="line">                result = IsSubtree(pRoot1, pRoot2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">                result = HasSubtree(pRoot1-&gt;left, pRoot2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!result)&#123;</span><br><span class="line">                result = HasSubtree(pRoot1-&gt;right, pRoot2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在面试的时候，一定要注意边界条件的检查，即检查空指针。当树A或树B为空的时候，定义相应的输出。如果没有检查并进行相应的处理，则程序非常容易崩溃，这是面试的大忌。</p><p>在上述代码中，我们调用HasSubtree遍历二叉树A。如果发现某一节点的值和树B的头节点的值相同，则调用IsSubtree，进行第二步判断。</p><p>第二步是判断树A中以R为根节点的子树是不是和树B具有相同的结构。同样，也可以用递归的思路考虑：如果节点R的值和树B的根节点不相同，则以R为根节点的子树和树B肯定不同；如果值相同，则递归地判断他们各自的左右节点的值是不是相同。递归的终止条件是我们到达了树A或者树B的节点。对应代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsSubtree</span><span class="params">(TreeNode* p1, TreeNode* p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p2 == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(p1 == <span class="literal">NULL</span> &amp;&amp; p2) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(p1-&gt;val != p2-&gt;val) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> IsSubtree(p1-&gt;left, p2-&gt;left) &amp; IsSubtree(p1-&gt;right, p2-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码有多处判断一个指针是不是空，这样做是为了避免试图访问空指针而造成陈旭崩溃，同时也设置了递归调用的退出条件。在写遍历树的代码时要高度警惕，在每一处需要访问地址的时候询问自己这个地址有没有可能是NULL，如果是该如何。</p><p>若树的结构中val的类型是double，则不能用==直接判断相等，而要设置如下判断函数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Equal</span><span class="params">(<span class="keyword">double</span> num1, <span class="keyword">double</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((num1-num2 &gt; <span class="number">-0.0000001</span>) &amp;&amp; (num1-num2 &lt; <span class="number">0.0000001</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）&lt;/p&gt;
&lt;h1 id=&quot;思路分析
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-合并两个排序的链表</title>
    <link href="https://github.com/DesmonDay/2019/01/18/%E5%89%91%E6%8C%87Offer-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
    <id>https://github.com/DesmonDay/2019/01/18/剑指Offer-合并两个排序的链表/</id>
    <published>2019-01-18T09:04:28.000Z</published>
    <updated>2019-01-18T09:15:27.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>想不到自己做对了，没遇到什么因为指针而错误的坑！算是一个小小的进步吧。虽然有个地方，因为我不知道动态内存怎么申请的，所以一开始有点卡，struct申请：ListNode* head = new ListNode(0); 这是在有构造函数的情况下，若没有，则直接new再加上结构体的名称。</p><p>至于算法本身，直接根据大小进行合并即可，下面这个是非递归的版本。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 单调递增</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">Merge</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span></span>&#123;</span><br><span class="line">        ListNode* head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">//记住！</span></span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span>(pHead1 &amp;&amp; pHead2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pHead1-&gt;val &lt;= pHead2-&gt;val)&#123;</span><br><span class="line">                p-&gt;next = pHead1;</span><br><span class="line">                pHead1 = pHead1-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                p-&gt;next = pHead2;</span><br><span class="line">                pHead2 = pHead2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pHead1) p-&gt;next = pHead1;</span><br><span class="line">        <span class="keyword">if</span>(pHead2) p-&gt;next = pHead2;</span><br><span class="line">        ListNode* temp = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(temp);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>下面这个是学习别人的递归版本。其实，递归写起来是比较短小精悍的，但关键就是要明白，结束条件是什么，怎么写递归，这也始终是我的一个短板。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 单调递增</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">Merge</span><span class="params">(ListNode* pHead1, ListNode* pHead2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1 == <span class="literal">NULL</span>) <span class="keyword">return</span> pHead2;</span><br><span class="line">        <span class="keyword">if</span>(pHead2 == <span class="literal">NULL</span>) <span class="keyword">return</span> pHead1;</span><br><span class="line">        ListNode* head = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(pHead1-&gt;val &lt; pHead2-&gt;val)&#123;</span><br><span class="line">            head = pHead1;</span><br><span class="line">            head-&gt;next = Merge(pHead1-&gt;next, pHead2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            head = pHead2;</span><br><span class="line">            head-&gt;next = Merge(pHead1, pHead2-&gt;next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。&lt;/p&gt;
&lt;h1 id=&quot;解题思
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-反转链表</title>
    <link href="https://github.com/DesmonDay/2019/01/18/%E5%89%91%E6%8C%87Offer-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://github.com/DesmonDay/2019/01/18/剑指Offer-反转链表/</id>
    <published>2019-01-18T07:44:27.000Z</published>
    <updated>2019-01-18T08:47:32.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个链表，反转链表后，输出新链表的表头。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>哎，惭愧，这题我没有做出来。然而，本应该是一道很基础的题目。我现在会两种写法，一是利用栈，二是利用头插法。这里就各自重写一次。另外，链表题要特别注意为空的情况。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct ListNode *next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList1</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead==<span class="literal">NULL</span> || pHead-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> pHead;</span><br><span class="line">        ListNode* p = pHead;</span><br><span class="line">        <span class="built_in">stack</span>&lt;ListNode*&gt; s;</span><br><span class="line">        <span class="keyword">while</span>(p-&gt;next)&#123;</span><br><span class="line">            s.push(p);</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* NewHead = p;</span><br><span class="line">        <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">            p-&gt;next = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> NewHead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">ReverseList2</span><span class="params">(ListNode* pHead)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead==<span class="literal">NULL</span> || pHead-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> pHead;</span><br><span class="line">        ListNode* p = pHead;</span><br><span class="line">        ListNode* q = pHead-&gt;next;</span><br><span class="line">        pHead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* r = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(q)&#123;</span><br><span class="line">            r = q-&gt;next;</span><br><span class="line">            q-&gt;next = p;</span><br><span class="line">            p = q;</span><br><span class="line">            q = r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后还看到一种递归的写法，但是不太懂，就不写了。链表题通常要注意以下两点：</p><ol><li>如果输入的头结点是 NULL，或者整个链表只有一个结点的时候</li><li>链表断裂的考虑</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个链表，反转链表后，输出新链表的表头。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-调整数组顺序使奇数位于偶数前面</title>
    <link href="https://github.com/DesmonDay/2019/01/16/%E5%89%91%E6%8C%87Offer-%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/"/>
    <id>https://github.com/DesmonDay/2019/01/16/剑指Offer-调整数组顺序使奇数位于偶数前面/</id>
    <published>2019-01-16T14:01:16.000Z</published>
    <updated>2019-01-16T14:05:23.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>一开始把题目看错了，没有看到要求相对位置不变，因此使用了类似于快排的方法来做（这个也应该是一个可能的考点）。由于要求相对位置不变，我的想法很简单，将奇数和偶数分别按顺序存储在两个vector中，再修改原始vector数组中的数字，但这样就占用了存储空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">array</span>[i] % <span class="number">2</span> != <span class="number">0</span>)&#123; <span class="comment">//奇数</span></span><br><span class="line">                a1.push_back(<span class="built_in">array</span>[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> a2.push_back(<span class="built_in">array</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a1.size(); i++)&#123;</span><br><span class="line">            <span class="built_in">array</span>[i] = a1[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=a1.size(); i&lt;<span class="built_in">array</span>.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = i-a1.size();</span><br><span class="line">            <span class="built_in">array</span>[i] = a2[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在牛客网上看到一个短小精悍的代码，有点类似冒泡排序。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reOrderArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;<span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="built_in">array</span>.size()<span class="number">-1</span>; j&gt;i; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">array</span>[j]%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; <span class="built_in">array</span>[j<span class="number">-1</span>]%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                    swap(<span class="built_in">array</span>[j], <span class="built_in">array</span>[j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>多学学！！同时，尽量熟悉使用vector来答题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-数值的整数次方(快速幂)</title>
    <link href="https://github.com/DesmonDay/2019/01/16/%E5%89%91%E6%8C%87Offer-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9-%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://github.com/DesmonDay/2019/01/16/剑指Offer-数值的整数次方-快速幂/</id>
    <published>2019-01-16T09:15:57.000Z</published>
    <updated>2019-01-16T12:14:57.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>参考博客：<a href="https://www.cnblogs.com/lca1826/p/6748372.html" target="_blank" rel="noopener">https://www.cnblogs.com/lca1826/p/6748372.html</a></p><p>惭愧，第一个想到的方法居然是调用pow()函数，而且也过了。实际上这道题目是要考察快速幂的知识。快速幂的目的就是做到快速求幂，假设我们要求a^b,按照朴素算法就是把a连乘b次，这样一来时间复杂度是O(b)也即是O(n)级别，快速幂能做到O(logn)，快了很多。</p><p>其原理如下： 假设我们要求a^b，那么其实b是可以拆成二进制的，该二进制数第i位的权为2^(i-1)，例如当b==11时，a^11=a^(2^0+2^1+2^3)，11的二进制是1011，11 = 2³×1 + 2²×0 + 2¹×1 + 2º×1，因此，我们将a¹¹转化为算 a^(2^0)*a^(2^1)*a^(2^3) ，看出来快的多了吧原来算11次，现在算三次。</p><p>由于是二进制，很自然想到使用位运算：&amp;和&gt;&gt;。&amp;运算通常用于二进制取位操作，例如一个数&amp;1的结果就是取二进制的最末位。还可以判断奇偶x&amp;1==0为偶，x&amp;1==1为奇。&gt;&gt;运算比较单纯,二进制去掉最后一位。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poww</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>,base=a;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>!=<span class="number">0</span>)</span><br><span class="line">        　　ans*=base;</span><br><span class="line">        base*=base;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">　 &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而需要注意的是，上面的b仅仅针对正数而言，因此在做题时需要考虑负数的情况，最终算法的书写结果如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> p = <span class="built_in">abs</span>((<span class="keyword">long</span> <span class="keyword">long</span>) exponent);</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p &amp; <span class="number">1</span>) </span><br><span class="line">                res *= base;</span><br><span class="line">            base *= base;</span><br><span class="line">            p &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exponent&gt;<span class="number">0</span> ? res : <span class="number">1</span>/res; <span class="comment">// 判断正负</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-二进制中1的个数</title>
    <link href="https://github.com/DesmonDay/2019/01/16/%E5%89%91%E6%8C%87Offer-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://github.com/DesmonDay/2019/01/16/剑指Offer-二进制中1的个数/</id>
    <published>2019-01-16T08:52:22.000Z</published>
    <updated>2019-01-16T09:00:05.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>我一开始的方法是最蠢笨的，即将整数表示为二进制位数，再依次数其中1的个数。由于负数是用补码表示的，因此负数这个情况花了不少时间。特别是最后有个特例始终过不了，只能添加了一个if判断语句，这才通过。蠢笨代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n &gt; <span class="number">0</span>)&#123; <span class="comment">// 正数</span></span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>, temp1 = n, temp2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(temp1 != <span class="number">0</span>)&#123;</span><br><span class="line">                temp2 = temp1 % <span class="number">2</span>;</span><br><span class="line">                temp1 = temp1 / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(temp2 == <span class="number">1</span>) cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">// 负数</span></span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">-2147483648</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>, temp1 = <span class="built_in">abs</span>(n), temp2 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> num[<span class="number">32</span>]; <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(temp1 != <span class="number">0</span>)&#123;</span><br><span class="line">                    temp2 = temp1 % <span class="number">2</span>;</span><br><span class="line">                    temp1 = temp1 / <span class="number">2</span>;</span><br><span class="line">                    <span class="comment">// 取反</span></span><br><span class="line">                    <span class="keyword">if</span>(temp2 == <span class="number">1</span>) num[i] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">else</span> num[i] = <span class="number">1</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 加1</span></span><br><span class="line">                <span class="keyword">int</span> n = i;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=n; j&lt;<span class="number">32</span>; j++) num[j] = <span class="number">1</span>;</span><br><span class="line">                i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(num[<span class="number">0</span>] == <span class="number">0</span>) num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    num[<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">                    <span class="keyword">while</span>(num[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                        num[i] = <span class="number">0</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt;= n<span class="number">-1</span>) num[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(num[i] == <span class="number">1</span>) cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外，其实还有一个问题是，整数为int型，这种做法还得考虑int是32位的。很复杂！！</p><h1 id="更简便方法"><a href="#更简便方法" class="headerlink" title="更简便方法"></a>更简便方法</h1><p>下面是从牛客看到的一个简单的方法。参考：<a href="https://www.nowcoder.com/profile/9536154/codeBookDetail?submissionId=17465787" target="_blank" rel="noopener">https://www.nowcoder.com/profile/9536154/codeBookDetail?submissionId=17465787</a>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n!= <span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析一下代码： 这段小小的代码，很是巧妙。</p><p>如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。</p><p>举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.我们发现减1的结果是把最右边的一个1开始的所有位都取反了。这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.那么<strong>一个整数的二进制有多少个1，就可以进行多少次这样的操作</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。&lt;/p&gt;
&lt;h1 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-矩阵覆盖</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E7%9F%A9%E9%98%B5%E8%A6%86%E7%9B%96/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-矩阵覆盖/</id>
    <published>2019-01-15T12:57:09.000Z</published>
    <updated>2019-01-15T12:58:57.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>类似跳台阶的题目，同样是根据数学归纳法来做。这也启示我，当遇到当n=?时的题目时，一般采用数学归纳法来做，找出归纳公式。此题为斐波那契数列。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rectCover</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">1</span>, second = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> result = number;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=number; i++)&#123;</span><br><span class="line">            result = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-变态跳台阶</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-变态跳台阶/</id>
    <published>2019-01-15T12:42:36.000Z</published>
    <updated>2019-01-15T12:46:43.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>经过之前的跳台阶一题，我也有了一定的经验教训，直接采用数学归纳法来做这题。很快便得到了递推的公式，result = 2^(number-1)。不再赘述，这题的关键便是找到规律，根据数学归纳法总结公式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloorII</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">2</span>,number<span class="number">-1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int a=1; return a&lt;&lt;(number-1);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看到有人说用移位操作更快，但其实比我直接调用pow来写慢了1ms。哈哈哈~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-跳台阶</title>
    <link href="https://github.com/DesmonDay/2019/01/15/%E5%89%91%E6%8C%87Offer-%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>https://github.com/DesmonDay/2019/01/15/剑指Offer-跳台阶/</id>
    <published>2019-01-15T12:35:14.000Z</published>
    <updated>2019-01-15T12:38:27.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>原来这个是数学归纳题，而我却误以为则应该是很难得动态规划之类的题目。其实最重要的，是分析求解的思路，找到规律或方法。这题如果能够认真的归纳，可以发现其实就如同斐波那契数列。当n=1时结果为1，当n=2时结果为2，之后地再直接递推便可得到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloor</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> first=<span class="number">1</span>, second=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> result = number;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=number; i++)&#123;</span><br><span class="line">            result = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。&lt;/p
      
    
    </summary>
    
      <category term="剑指Offer" scheme="https://github.com/DesmonDay/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="C++" scheme="https://github.com/DesmonDay/tags/C/"/>
    
  </entry>
  
</feed>
